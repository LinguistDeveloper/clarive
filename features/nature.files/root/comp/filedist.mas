%my $uid = rand(10000);
%$uid=~s/\.//g;
(function(theForm){
    // shorthand alias
    var fm = Ext.form;      
    var cm = new Ext.grid.ColumnModel([
    	{
           id:'filter',
           header: "Filtros",
           dataIndex: 'filter',
           width: 100
        },
    	{
           id:'exclussions',
           header: "Exclusiones",
           dataIndex: 'exclussions',
           width: 100
        },
    	{
           id:'isrecursive',
           header: "Recursivo?",
           dataIndex: 'isrecursive',
           width: 70
        },
    	{
           id:'src_dir',
           header: "Directorio Origen",
           dataIndex: 'src_dir',
           width: 200
        },        
    	{
           id:'dest_dir',
           header: "Directorio Destino",
           dataIndex: 'dest_dir',
           width: 200
        },         
    	{
           id:'ssh_host',
           header: "Conexion user@host",
           dataIndex: 'ssh_host',
           width: 100
        },  
    	{
           id:'xtype',
           header: "Tipo",
           dataIndex: 'xtype',
           width: 50
        },
    	{
           id:'sys',
           header: "Sistema",
           dataIndex: 'sys',
           width: 50
        }		
        ]);

   // by default columns are sortable
    cm.defaultSortable = true;

    // this could be inline, but we want to define the Plant record
    // type so we can add records dynamically
    var rec = Ext.data.Record.create([
           {name: 'id', type: 'string'},
           {name: 'ns', type: 'string'},
           {name: 'bl', type: 'string'},
           {name: 'filter', type: 'string'},
           {name: 'exclussions', type: 'string'},
           {name: 'isrecursive', type: 'string'},
           {name: 'src_dir', type: 'string'},
           {name: 'dest_dir', type: 'string'},
           {name: 'ssh_host', type: 'string'},
           {name: 'xtype', type: 'string'},
           {name: 'sys', type: 'string'}
      ]);

    // create the Data Store
	var store = new Ext.data.JsonStore({
		url: '<% $c->stash->{url_filedist_store} %>',
		root:'data',	
		fields: [ 
           {name: 'id', type: 'string'},
           {name: 'ns', type: 'string'},
           {name: 'bl', type: 'string'},
           {name: 'filter', type: 'string'},
           {name: 'exclussions', type: 'string'},
           {name: 'isrecursive', type: 'string'},
           {name: 'src_dir', type: 'string'},
           {name: 'dest_dir', type: 'string'},
           {name: 'ssh_host', type: 'string'},
           {name: 'xtype', type: 'string'},
           {name: 'sys', type: 'string'}
		],
		listeners: {
			beforeload: function(){Baseliner.showCustomMask(getGrid(),'Cargando mapeos...');},
			load: function(){Baseliner.hideCustomMask(getGrid());},
			exception: function(){Baseliner.hideCustomMask(getGrid());}
		}
	});

	<& /comp/search_field.mas &>
    // create the editor grid
    var grid = new Ext.grid.GridPanel({
    	id: 'mappings<%$uid%>',
    	name: 'mappings[]',
        store: store,
        cm: cm,
        sm: new Ext.grid.RowSelectionModel({
                singleSelect: true,
                listeners: {
                     rowselect: function(smObj, rowIndex, record) {   
                         return record;
                    }
               }}),

		autoWidth:true,
        height: 230,
        title:'Mapeo de ficheros',
        frame:true,

        tbar: [ '<% _loc('Buscar') %>: ', ' ',
				new Ext.app.SearchField({
					store: store,
					params: {start: 0, limit: 10},
					emptyText: '<% _loc('<Enter your search string>') %>'
				}),new Ext.Toolbar.Button({
            text: 'Insertar Mapeo',
            icon: '/static/images/drop-add.gif',
           	cls: 'x-btn-text-icon',
            handler : function(){
            	win.setTitle('Nuevo mapeo de ficheros');
            	getFormFileDist().getForm().reset();
                win.show();
            }}),
            new Ext.Toolbar.Button({
            text: 'Editar Mapeo',
            icon: '/static/images/drop-yes.gif',
           	cls: 'x-btn-text-icon',
            handler : function(){
            	win.setTitle('Editar mapeo seleccionado');
            	var selectedRecord = grid.getSelectionModel().getSelected();
            	if(selectedRecord){
					getFormFileDist().getForm().loadRecord(selectedRecord);
					//var hiddens = getFormFileDist().findByType('hidden');
					//for(var x=0;x < hiddens.length;x++)hiddens[x].fireEvent('change',null);
					//a�adir al grid y submit
					win.show();
				}else{
					Ext.MessageBox.show({  
			                     title: 'No se pudo editar',  
			                     msg: 'Debe seleccionar antes un registro de la lista.',  
			                     buttons: Ext.MessageBox.OK,  
			                     icon: Ext.MessageBox.ERROR  
			                 });  
				}				
            }}),
                        
            new Ext.Toolbar.Button({
            text: 'Eliminar Mapeo',
            icon: '/static/images/del.gif',
           	cls: 'x-btn-text-icon',
 			handler : function(){     
                var selectedRecord = grid.getSelectionModel().getSelected();
				if(selectedRecord){
					grid.el.mask('Actualizando', 'x-mask-loading');
				
					Ext.Ajax.request({
						url    : '<% $c->stash->{url_filedist_delete} %>',
						params :  {
							id  : selectedRecord.data.id
						},
						success : function() {
							grid.getStore().remove(selectedRecord);
							grid.el.unmask();
						}
					});
				}else{
					Ext.MessageBox.show({  
			                     title: 'No se pudo eliminar',  
			                     msg: 'Debe seleccionar antes un registro de la lista.',  
			                     buttons: Ext.MessageBox.OK,  
			                     icon: Ext.MessageBox.ERROR  
			                 });  
				}
            }
        })]
    });

     // trigger the data store load
    store.load();
	
    theForm.add(grid);

      var formFileDist = new Ext.FormPanel( {
      			 id: 'formFileDist<%$uid%>',
                 border    : false,
                 frame		: true,
                 url      : '<% $c->stash->{url_filedist_submit} %>',
                 items     :  <& /comp/config/config_form.mas, metadataKey => 'metadata_filedist' &>
             }
        );      
        
		//creamos la ventana que contendr� el formulario  
		var win = new Ext.Window({  
		    title: 'Nuevo mapeo de ficheros',  
		    width:450,  
		    height:650, 
		    autoScroll: true,
		    closeAction: "hide",
		    resizable: false,
			layout: 'fit',
		    items:formFileDist, //le asignamos el formulario solamente  
		    buttonAlign: 'right', //botones alineados a la derecha  
		    buttons:[{
		    	text:'Guardar',
			     handler : function() {  
			         formFileDist.getForm().submit({  
			             waitMsg : 'Salvando datos...',  
			             failure: function (form, action) {  
			                 Ext.MessageBox.show({  
			                     title: 'Error al salvar los datos',  
			                     msg: 'Error al salvar los datos.',  
			                     buttons: Ext.MessageBox.OK,  
			                     icon: Ext.MessageBox.ERROR  
			                 });  
			             },  
			             success: function (form, request) {  
			                 Ext.MessageBox.show({  
			                     title: 'Datos salvados correctamente',  
			                     msg: 'Datos salvados correctamente',  
			                     buttons: Ext.MessageBox.OK,  
			                     icon: Ext.MessageBox.INFO  
			                 });
			                 store.load();  
			                 win.hide();
			             }  
			         });  
			     }
			     }	    	
		    	,
		    	{
		    	text:'Cancelar', 
		    	handler: function(){win.hide();}
		    	}] //botones del formulario  
		}); 
		
      function getFormFileDist(){ return formFileDist;}
	  function getGrid(){return grid;}
     	
	return grid;
});
