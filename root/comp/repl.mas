/*
REPL component.

To do:
	- line numbering
	- coloring in the console
	- save to file in a /Files folder
	- trim output on the server side

*/
(function(){
	var last_name = "";
	var style_cons = 'background: black; background-image: none; color: #10C000; font-family: "DejaVu Sans Mono", "Courier New", Courier';
	var saved_store = new Ext.data.JsonStore({
		url: '/repl/list_saved',
		root: 'data',
		fields: ['id', 'ns', 'code', 'output' ]
	});
	saved_store.on('load', function(s,r,o) {
		tsave_delete_all();
		s.each( function(rec){
			var ns = rec.data.ns;
			var child = new Ext.tree.TreeNode({text:ns, draggable : false, need_load: true });
			tsave.appendChild( child );
		});
		tsave.expand();
	});
	saved_store.load();
	
    var code = new Ext.form.TextArea({
        name: 'code',
        value: "$c->model('Repository')",
		style: style_cons,
        width: 700,
        height: 300
    });

    var root = new Ext.tree.TreeNode();
    var thist = new Ext.tree.TreeNode({text:'History',draggable : false, expandable:true, leaf:false });
    var tsave = new Ext.tree.TreeNode({text:'Saved',draggable : false, expandable:true, leaf:false });
	var tsave_delete_all = function() { var delNode; while (delNode = tsave.childNodes[0]) tsave.removeChild(delNode); }
    var tree = new Ext.tree.TreePanel({
        region: 'west',
        title: _("History"),
        width: 280,
        expanded: true,
        animate : true,          
        collapsible: true,
        split: true,
        rootVisible: false,
        autoScroll : true,          
        containerScroll : true,          
        root : root,
        dropConfig : { appendOnly : true }     
    });
    root.appendChild( thist );
    root.appendChild( tsave );

    tree.on('click', function(n,e) {
		if( n.attributes.need_load ) {
			var ns = n.attributes.text;
			last_name = ns;
			Ext.Ajax.request({
				url: '/repl/load',
				params: { ns: ns }, 
				success: function(xhr) {
					var json = Ext.util.JSON.decode( xhr.responseText );
					code.setValue( json.code );
					output.setValue( json.output );
				}
			});
		} else {
			code.setValue(n.attributes.code);
			output.setValue(n.attributes.output);
		}
    });

    var status = new Ext.form.TextField({
		name: 'status',
		fieldLabel: 'Status',
		width: 700
	});

    var elapsed = new Ext.form.TextField({
		fieldLabel: 'Elapsed',
		readOnly: true,
		width: 60 
	});

    var output = new Ext.form.TextArea({
        name: 'output',
        fieldLabel: _('Output'),
		style: style_cons,
        width: 700,
        height: 300
    });

	var console = new Ext.Panel({
		layout: 'fit',
		collapsible: true,
		title: _('Console'),
		split: true,
		height: 350,
		items: [ output ],
		region: 'south'
	});

    function save(params) {
        var dt = new Date();
        var short = params.c.substring(0,20);
        var node_name = params.tx || dt.format("Y-m-d H:i:s") + ": " + short;
        var child = new Ext.tree.TreeNode({text:node_name, draggable : false, code: params.c, output: params.o });
		if( params.save!=undefined && params.save ) {
			last_name = node_name;
			var f = form.getForm();
			f.submit({ url:'/repl/save', params: { id: params.tx, output: params.o } });
		}
        params.t.appendChild( child );
        tree.expandAll();
    }

    function submit(parms) {
		Baseliner.showLoadingMask(form.getEl(), _("Loading") );
        var f = form.getForm();
        output.setValue("");
        f.submit({
            params: parms,
            success: function(f,action){
				Baseliner.hideLoadingMask();
				var data = 
					( action.result.stdout ?  action.result.stdout + "\n" : "" ) +  
					( action.result.stderr ?  action.result.stderr + "\n" : "" ) +  
					action.result.result ;
				output.setValue( data );
				status.setValue( "OK" );
				elapsed.setValue( action.result.elapsed );
                save({ t: thist, c: code.getValue(), o: output.getValue() });
            },
            failure: function(f,action){
				Baseliner.hideLoadingMask();
				status.setValue( "ERROR" );
				elapsed.setValue( action.result.elapsed );
				if( action.result==undefined ) return;
				var data = 
					action.result.error + "\n" + 
					action.result.stdout + "\n" + 
					action.result.stderr ;
				output.setValue( data );
            }
        });
    };

	var tbar = [
			{   xtype: 'button',
				text: _('Eval'),
				icon:'/static/images/scm/debug/debug_view.gif',
				cls: 'x-btn-text-icon',
				handler: function(){
					submit({ eval: true });
				}
			},
			{   xtype: 'button',
				text: _('Dump'),
				icon:'/static/images/scm/debug/genericregister_obj.gif',
				cls: 'x-btn-text-icon',
				handler: function(){
					submit({ dump: 'yaml' });
				}
			},
			{   xtype: 'button',
				text: _('JSON'),
				icon:'/static/images/scm/debug/hierarchicalLayout.gif',
				cls: 'x-btn-text-icon',
				handler: function(){
					submit({ dump: 'json' });
				}
			},
			{   xtype: 'button',
				text: _('SQL'),
				icon:'/static/images/scm/debug/memory_view.gif',
				cls: 'x-btn-text-icon',
				handler: function(){
					submit({ sql: 'array', dump: 'yaml' });
				}
			},
			{   xtype: 'button',
				text: _('SQL-Hash'),
				icon:'/static/images/scm/debug/memory_view.gif',
				cls: 'x-btn-text-icon',
				handler: function(){
					submit({ sql: 'hash', dump: 'yaml' });
				}
			},
			{   xtype: 'button',
				text: _('JS'),
				icon:'/static/images/gears.gif',
				cls: 'x-btn-text-icon',
				handler: function(){
					try { eval(code.getValue());
					} catch(e) {
						console.setValue( e + "");
					}
				}
			},
			{   xtype: 'button',
				text: _('JS Win'),
				icon:'/static/images/gears.gif',
				cls: 'x-btn-text-icon',
				handler: function(){
					eval( "var code_evaled = " + code.getValue() );
					var win = new Ext.Window( code_evaled );
					if( win.width == undefined ) { win.width = '90%' }
					win.show();
					/* try { eval("new Ext.Window("+ code.getValue() + ").show()");
					} catch(e) {
						console.setValue( e + "");
					} */
				}
			},
			{   xtype: 'button',
				text: _('Save'),
				icon:'/static/images/scm/debug/write_obj.gif',
				cls: 'x-btn-text-icon',
				handler: function(){
					Ext.Msg.prompt('Name', 'Save as:', function(btn, text){
						if (btn == 'ok'){
							save({ t: tsave, c: code.getValue(), o: output.getValue(), tx: text, save: true });
						}
					}, undefined, false, last_name );
				}
			},
			{   xtype: 'button',
				text: _('Export all to file'),
				icon:'/static/images/icons/drive_go.gif',
				cls: 'x-btn-text-icon',
				handler: function(){
					Baseliner.ajaxEval('/repl/save_to_file',{},function(res){
						if( res.success ) {
							Baseliner.message(_('Console'), _('Exported all items to files.') );
						} else {
							Ext.Msg.alert(_('Error'), res.msg ); 
						}
					});
				}
			},
			{   xtype: 'button',
				text: _('Reload'),
				icon:'/static/images/icons/arrow_refresh.gif',
				cls: 'x-btn-text-icon',
				handler: function(){
					saved_store.load();
				}
			},
			{   xtype: 'button',
				text: _('Delete'),
				icon:'/static/images/scm/debug/delete_config.gif',
				cls: 'x-btn-text-icon',
				handler: function(){
					var selectedNode = tree.getSelectionModel().getSelectedNode();
					if( selectedNode == undefined ) return;
					var ns = selectedNode.text;
					Ext.Msg.confirm(_('Confirmation'), _('Are you sure you want to delete the entry %1?', ns), 
							function(btn){ 
								if(btn=='yes') {
									Ext.Ajax.request({
										url: '/repl/delete',
										params: { ns: ns }, 
										success: function(xhr) {
											saved_store.load();
										}
									});
								}
							}
					);
				}
			}, '->', _('Elapsed')+': ', elapsed
	];

    var form = new Ext.FormPanel({
			layout   : 'fit',
			region   : 'center',
			split    : true,
            url      : '/repl/eval',
            frame    : false,
            hideLabel: false,
			tbar     : tbar,
            items 	 : [ code ]
        }
    );
    form.setTitle("REPL");


    var panel = new Ext.Panel({
        title: _('REPL'),
        layout: 'border',
        items: [ tree, form, console ]
    });
    return panel;
})();

