<%args>
	$can_edit => 0
</%args>
(function(){
	var store=new Ext.data.JsonStore({
		root: 'data' , 
		remoteSort: true,
		totalProperty:"totalCount", 
		id: 'rownum', 
		url: '/job/calendar_list_json',
		fields: [ 
			{  name: 'id' },
			{  name: 'name' },
			{  name: 'description' },
			{  name: 'bl' },
			{  name: 'bl_desc' },
			{  name: 'ns' },
			{  name: 'ns_desc' }
		]
	});

	Ext.app.SearchField = Ext.extend(Ext.form.TwinTriggerField, {
		initComponent : function(){
			Ext.app.SearchField.superclass.initComponent.call(this);
			this.on('specialkey', function(f, e){
				if(e.getKey() == e.ENTER){
					this.onTrigger2Click();
				}
			}, this);
		},

		validationEvent:false,
		validateOnBlur:false,
		trigger1Class:'x-form-clear-trigger',
		trigger2Class:'x-form-search-trigger',
		hideTrigger1:true,
		width:280,
		hasSearch : false,
		paramName : 'query',

		onTrigger1Click : function(){
			if(this.hasSearch){
				this.el.dom.value = '';
				var o = {start: 0};
				this.store.baseParams = this.store.baseParams || {};
				this.store.baseParams[this.paramName] = '';
				this.store.reload({params:o});
				this.triggers[0].hide();
				this.hasSearch = false;
			}
		},

		onTrigger2Click : function(){
			var v = this.getRawValue();
			if(v.length < 1){ //>
				this.onTrigger1Click();
				return;
			}
			var o = {start: 0};
			this.store.baseParams = this.store.baseParams || {};
			this.store.baseParams[this.paramName] = v;
			this.store.reload({params:o});
			this.hasSearch = true;
			this.triggers[0].show();
		}
	});


		var ps = 30; //page_size
		store.load({params:{start:0 , limit: ps}}); 

		//Seleccion multiple con checkboxes		
		var checkSelectionModel = new Ext.grid.CheckboxSelectionModel();
		
		// create the grid
		var grid = new Ext.grid.GridPanel({
			renderTo: 'main-panel',
			title: '<% _loc('Job Calendars') %>',
			header: false,
            stripeRows: true,
			autoScroll: true,
			autoWidth: true,
			store: store,
			viewConfig: [{
					forceFit: true
			}],
			selModel: checkSelectionModel, //new Ext.grid.RowSelectionModel({singleSelect:true}),
			loadMask:'true',
			columns: [
				checkSelectionModel,
				{ header: '<% _loc('Calendar') %>', width: 200, dataIndex: 'name', sortable: true },	
				{ header: '<% _loc('Description') %>', width: 200, dataIndex: 'description', sortable: true },	
				{ header: '<% _loc('Baseline') %>', width: 100, dataIndex: 'bl_desc', sortable: true },	
				{ header: '<% _loc('Namespace') %>', width: 150, dataIndex: 'ns', sortable: true },	
				{ header: '<% _loc('Namespace Description') %>', width: 200, dataIndex: 'ns_desc', sortable: true }	
			],
			autoSizeColumns: true,
			deferredRender:true,
			bbar: new Ext.PagingToolbar({
								store: store,
								pageSize: ps,
								displayInfo: true,
								displayMsg: 'Rows {0} - {1} de {2}',
								emptyMsg: "No hay registros disponibles"
						}),        
			tbar: [ 'Buscar: ', ' ',
				new Ext.app.SearchField({
					store: store,
					params: {start: 0, limit: ps},
					emptyText: '<% _loc('<Enter your search string>') %>'
				}),
% if( $can_edit ) {
				new Ext.Toolbar.Button({
					text: '<% _loc('Add') %>',
					icon:'/static/images/drop-add.gif',
					cls: 'x-btn-text-icon',
					handler: function() {
						//Window
						var ns_store = new Ext.data.SimpleStore({ 
						   fields: ['value', 'name', 'type' ], 
						   data : <% js_dumper( $c->stash->{namespaces} ) %>
						}); 
						var bl_store = new Ext.data.SimpleStore({ 
						   fields: ['value', 'name'], 
						   data : <% js_dumper( $c->stash->{baselines} ) %>
						}); 						
						var type_store = new Ext.data.SimpleStore({ 
						   fields: ['value', 'name'], 
						   data : <% js_dumper( $c->stash->{calendar_types} ) %>
						}); 
						
						var new_cal = new Ext.FormPanel({
							url: '/job/calendar_update',
							frame: true,
							labelWidth: 150, 
							defaults: { width: 350 },
							buttons: [
								{  text: '<% _loc('OK') %>',
									handler: function(){ 
										var ff = new_cal.getForm();
										var comboCopy = ff.findField('copyof');
										if(!comboCopy.disabled){
											if(comboCopy.getValue().search(/^\d+$/)>=0){
												ff.submit({
													success: function(form, action) { 
														grid.getStore().load();
														win.close(); 
													},
													failure: function(form, action) { Ext.Msg.alert("<% _loc('Failure') %>", action.result.msg); }
												});
											}else{
												Ext.Msg.alert("<% _loc('Failure') %>", "Si quiere realizar una copia de un calendario, debe seleccionar al menos uno de la lista.");
											}
										}else{
											ff.submit({
												success: function(form, action) { 
													grid.getStore().load();
													win.close(); 
												},
												failure: function(form, action) { Ext.Msg.alert("<% _loc('Error') %>", action.result.msg); }
											});										
										}
									}
								},
								{  text: '<% _loc('Cancel') %>' , handler: function(){  win.close() } }
							],
							items: [
								{  xtype: 'hidden', name: 'action', value: 'create' },
								{  xtype: 'textfield', name: 'name', fieldLabel: '<% _loc('Calendar Name') %>' }, 
								{  xtype: 'textarea', name: 'description', fieldLabel: '<% _loc('Description') %>' }, 
								{
									xtype: 'radiogroup',
									fieldLabel: 'Modo de creacion',
									items: [
										{boxLabel: 'Crear como nuevo', name: 'rbMode', inputValue: '1', checked: true},
										{boxLabel: 'Crear como copia de otro', name: 'rbMode', inputValue: '2'}
									],
									listeners: {
										'change': function(rg,checked){
											var flag = (checked.getGroupValue() == '1');
											var ff = new_cal.getForm();
											var comboCopy = ff.findField('copyof');
											comboCopy.setDisabled(flag);
										}
									}
								},								
								{  xtype: 'combo', 
										   name: 'copyof', 
										   hiddenName: 'copyof',
										   fieldLabel: 'Copia de', 
										   disabled: true,
										   mode: 'local', 
										   editable: false,
										   forceSelection: true,
										   triggerAction: 'all',
										   store: store,
										   value: '[Seleccione calendario]',
										   valueField: 'id',
										   displayField:'name', 
										   allowBlank: false
								},								
								{  xtype: 'combo', 
										   name: 'ns', 
										   hiddenName: 'ns',
										   fieldLabel: '<% _loc('Namespace') %>', 
                                           resizable: true,
										   mode: 'local', 
										   editable: false,
										   forceSelection: true,
										   triggerAction: 'all',
										   store: ns_store, 
										   valueField: 'value',
										   value: '/',
										   displayField:'name', 
										   allowBlank: false
								},
								{  xtype: 'combo', 
										   name: 'bl', 
										   hiddenName: 'bl',
										   fieldLabel: '<% _loc('Baseline') %>',
										   mode: 'local', 
										   editable: false,
										   forceSelection: true,
										   triggerAction: 'all',
										   store: bl_store, 
										   valueField: 'value',
										   value: '*',
										   displayField:'name', 
										   allowBlank: false
								}	
								
							]
						});
						var win = new Ext.Window({
							layout: 'fit',
							height: 300, width: 550,
							title: '<% _loc('Create Calendar') %>',
							items: new_cal
						});
						win.show();
					}
				}),
				new Ext.Toolbar.Button({
					text: '<% _loc('Edit') %>',
					icon:'/static/images/drop-yes.gif',
					cls: 'x-btn-text-icon',
					handler: function() {
						var sm = grid.getSelectionModel();
						if (sm.hasSelection())
						{
							var sel = sm.getSelected();
							Baseliner.addNewTabComp('/job/calendar?id_cal=' + sel.data.id , '<% _loc('Calendar') %>');
						} else {
							Ext.Msg.alert('Error', '<% _loc('Select at least one row') %>');	
						};
						
					}
				}),
				new Ext.Toolbar.Button({
					text: '<% _loc('Delete') %>',
					icon:'/static/images/del.gif',
					cls: 'x-btn-text-icon',
					handler: function() {
						var sm = grid.getSelectionModel();
						var sel = sm.getSelected();
						Ext.Msg.confirm('<% _loc('Confirmation') %>', '<% _loc('Are you sure you want to delete the calendar') %>' + ' ' + sel.data.name + '?', 
							function(btn){ 
								if(btn=='yes') {
									var conn = new Ext.data.Connection();
									conn.request({
										url: '/job/calendar_update',
										params: { action: 'delete', id_cal: sel.data.id },
										success: function(resp,opt) { grid.getStore().remove(sel); },
										failure: function(resp,opt) { Ext.Msg.alert('<% _loc('Error') %>', '<% _loc('Could not delete the calendar.') %>'); }
									});	
								}
							} );
					}
				}),
% }
				new Ext.Toolbar.Button({
					text: '<% _loc('Previsualizar') %>',
					icon:'/static/gui/extjs/resources/images/default/shared/calendar.gif',
					cls: 'x-btn-text-icon',
					handler: function() {
						var sm = grid.getSelectionModel();
						if (sm.hasSelection())
						{
							var lastBL = "";
							var commonBL = "";
							var sel = sm.getSelections();
							var idsSelected ="";
							var nsSelected ="";
							var _namespaces ="";
							for(var i=0;i<sel.length;i++){
								idsSelected = idsSelected + ((idsSelected=="")?"":",") + sel[i].data.id;
								nsSelected = nsSelected + ((nsSelected=="")?"":",") + sel[i].data.ns;
								_namespaces = _namespaces + ((_namespaces=="")?"":" + ") + sel[i].data.name;
								if(lastBL!=""){
									if(lastBL != sel[i].data.bl && i>0 && sel[i].data.bl != "*"){
										Ext.Msg.alert('Error', 'No se pueden previsualizar calendarios si tienen entornos diferentes.');
										return;
									}
								}
								lastBL = (sel[i].data.bl != "*") ? sel[i].data.bl : "";
								commonBL = sel[i].data.bl;
							}
							var _d = new Date();
							var fechaTexto = _d.getDate() + "/" + (_d.getMonth()+1) + "/" + _d.getFullYear();
							Baseliner.addNewTabComp('/job/preview_calendar?ns=' + nsSelected + '&bl=' + commonBL + '&date=' + fechaTexto, '<% _loc('Previsualizar Calendario') %> ['+_namespaces+']');
						} else {
							Ext.Msg.alert('Error', '<% _loc('Select at least one row') %>');	
						};
					}
				}),				
				'->'
				]
		});

	grid.getView().forceFit = true;

% if( $can_edit ) {
	grid.on("rowdblclick", function(grid, rowIndex, e ) {
			var r = grid.getStore().getAt(rowIndex);
			Baseliner.addNewTabComp('/job/calendar?id_cal=' + r.get('id') , '<% _loc('Calendar') %>');
		});		
% }
		
	return grid;
})();

