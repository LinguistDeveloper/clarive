(function(){
    Ext.QuickTips.init();

    Ext.grid.CheckColumn = function(config){
        Ext.apply(this, config);
        if(!this.id){
            this.id = Ext.id();
        }
        this.renderer = this.renderer.createDelegate(this);
    };

    Ext.grid.CheckColumn.prototype ={
        init : function(grid){
            this.grid = grid;
            this.grid.on('render', function(){
                var view = this.grid.getView();
                view.mainBody.on('mousedown', this.onMouseDown, this);
            }, this);
        },

        onMouseDown : function(e, t){
            if(t.className && t.className.indexOf('x-grid3-cc-'+this.id) != -1){
                e.stopEvent();
                var index = this.grid.getView().findRowIndex(t);
                var record = this.grid.store.getAt(index);
                record.set(this.dataIndex, !record.data[this.dataIndex]);
            }
        },

        renderer : function(v, p, record){
            p.css += ' x-grid3-check-col-td'; 
            return '<div class="x-grid3-check-col'+(v?'-on':'')+' x-grid3-cc-'+this.id+'">&#160;</div>';
        }
    };


    function formatDate(value){
        return value ? value.dateFormat('M d, Y') : '';
    };
    // shorthand alias
    var fm = Ext.form;

    // custom column plugin example
    var checkColumn = new Ext.grid.CheckColumn({
       header: "Active?",
       dataIndex: 'active',
       width: 55
    });

    var render_step = function(value,metadata,rec,rowIndex,colIndex,store) {
        return "<div style='font-weight:bold; font-size: 12px;'>" + value + "</div>" ;
    };
    var render_name = function(value,metadata,rec,rowIndex,colIndex,store) {
        return "<div style='font-weight:bold; font-size: 14px;'>" + value + "</div>" ;
    };

    var render_icon = function(value,metadata,rec,rowIndex,colIndex,store) {
        var icon = rec.data.step.toLowerCase();
        return "<img alt='"+value+"' border=0 style='vertical-align: top; margin: 0 0 10 2;' src='/static/images/icons/step_"+icon+".png' />" ;
    };

    // the column model has information about grid columns
    // dataIndex maps the column to the specific data field in
    // the data store (created below)
    var steps = new Ext.data.SimpleStore({ fields:['step', 'name'] ,data: [['PRE',_('PRE')],['RUN',_('RUN')],['POST',_('POST')]] });

    var cm = new Ext.grid.ColumnModel([
        { width: 40, sortable: false, renderer: render_icon },
        {
           header: "Step",
           dataIndex: 'step',
           renderer: render_step,
           width: 120,
           editor: new Ext.form.ComboBox({
                value: true, hiddenName:'step',
                typeAhead: true, valueField: 'step', displayField:'name', mode: 'local', store: steps,
                forceSelection: true, triggerAction: 'all',
                editable: false, css: '' , width: 350, lazyRender:true,
                listClass: 'x-combo-list-small'
            })
        },
        {
           header: "Sequence",
           dataIndex: 'seq',
           width: 95,
           editor: new fm.TextField({
               allowBlank: false
           })
        },
        {
           id:'key',
           header: "Key",
           dataIndex: 'key',
           renderer: render_name,
           width: 280
        },
        {
           id: 'description',
           header: "Description",
           dataIndex: 'description',
           width: 250,
           editor: new fm.TextField({
               allowBlank: false
           })
        },
        checkColumn
    ]);

    // by default columns are sortable
    cm.defaultSortable = true;

    // this could be inline, but we want to define the Service record
    // type so we can add records dynamically
    var Service = Ext.data.Record.create([
           // the "name" below matches the tag name to read, except "availDate"
           // which is mapped to the tag "availability"
           {name: 'seq', type: 'string'},
           {name: 'key' },
           {name: 'light'},
           {name: 'step' },   
           {name: 'description' },   
           {name: 'active', type: 'bool'}
      ]);

    var store2=new Ext.data.JsonStore({
        root: 'data' , 
        remoteSort: true,
        totalProperty:"totalCount", 
        id: 'id', 
        url: '/chain/detail',
        fields: [ 
            {  name: 'id' },
            {name: 'seq', type: 'string'},
            {name: 'key' },
            {name: 'light'},
            {name: 'step' },   
            {name: 'description' },   
            {name: 'active', type: 'bool'}
        ]
    });

    // create the Data Store
    var store = new Ext.data.Store({
        // load using HTTP
        url: '/chain/detail',
        baseParams: { id: '<% $c->stash->{id_chain} %>' },
        reader: new Ext.data.JsonReader({
               record: 'service'
           }, Service),
        sortInfo:{field:'key', direction:'ASC'}
    });

    var add_service = function() {
                var p = new Service({
                    key: 'service.dummy',
                    description: 'Mostly Shade',
                    step: 'PRE',
                    seq: 300,
                    active: false
                });
                grid.stopEditing();
                store.insert(0, p);
                grid.startEditing(0, 0);
    };

    // create the editor grid
    var grid = new Ext.grid.EditorGridPanel({
        region: 'center',
        store: store,
        cm: cm,
        width:600,
        height:300,
        autoExpandColumn:'description',
        title:'<% _loc('Service Chain') %>',
        plugins:checkColumn,
        clicksToEdit:1,
        tbar: [ {
            text: '<% _loc('Delete') %>',
            icon:'/static/images/del.gif',
            cls: 'x-btn-text-icon',
            handler: function() {
                var sm = grid.getSelectionModel();
                var sel = sm.getSelected();
                Ext.Msg.confirm('<% _loc('Confirmation') %>', '<% _loc('Are you sure you want to delete the chained service') %> <b>' + sel.data.key + '</b>?', 
                    function(btn){ 
                        if(btn=='yes') {
                            var conn = new Ext.data.Connection();
                            conn.request({
                                url: '/chain/update',
                                params: { action: 'delete', id_rel: sel.data.id },
                                success: function(resp,opt) { grid.getStore().remove(sel); },
                                failure: function(resp,opt) { Ext.Msg.alert('<% _loc('Error') %>', '<% _loc('Could not delete the chained service.') %>'); }
                            });	
                        }
                    } );
            }
        },
        {
            text: '<% _loc('Save') %>',
            icon:'/static/images/download.gif',
            cls: 'x-btn-text-icon'
        }
        ]
    });

    grid.on('afterrender', function(){
        // not working yet: make the grid a drop target
        var panelDropTarget = new Ext.dd.DropTarget( grid.getEl() , {
            ddGroup    : 'chainDD',
            notifyDrop : function(dd, e, data){
                    var node = dd.dragData.node;
                    var node_attr = node.attributes.attributes; // sent by the server
                    var p = new Service({
                        key: node_attr.key,
                        description: node_attr.name,
                        step: 'PRE',
                        seq: 300,
                        active: true
                    });
                    grid.stopEditing();
                    store.insert(0, p);
                    grid.startEditing(0, 0);
                    return true;
            }
        });
    });
    // trigger the data store load
    store.load();
    store2.load();

    var rootNode = new Ext.tree.AsyncTreeNode({
        text: 'Root'
    });
    var field = 'name';
    var tree = new Ext.tree.TreePanel({
        title: _('Services'),
        region: 'west',
        useArrows: true,
        autoScroll: true,
        resizable: true,
        width: 280,
        collapsible: true,
        collapsed: false,
        split : true,
        animate: true,
        enableDrag: true,
        enableDD: true,
        containerScroll: true,
        rootVisible: false,
        tbar: [
            { xtype:'button', 
              icon:'/static/images/silk/arrow_switch.png',
              cls: 'x-btn-text-icon',
              text:_('Switch'), handler:function(){
                  field = field == 'key' ? 'name' : 'key';
                  tree.getLoader().dataUrl = '/service/tree?field=' + field;
                  tree.getLoader().load(tree.root);  }
            }
        ],
        ddGroup: 'chainDD',
        dataUrl: '/service/tree?field=' + field,
        root: {
            nodeType: 'async',
            text: '/',
            draggable:false,
            id:'root'
        }
    });
    
    var panel = new Ext.Panel({
        layout: 'border',
        items: [
            tree,
            grid
        ]
    });
    return panel;
})();



