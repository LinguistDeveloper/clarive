(function(){
	var username = '<% $c->stash->{username} %>';
    var fields = [ 
			{  name: 'id' },
			{  name: 'id_message' },
			{  name: 'subject' },
			{  name: 'body' },
			{  name: 'sender' },
			{  name: 'to' },
			{  name: 'cc' },
			{  name: 'sent' },
			{  name: 'received' },
			{  name: 'type' }
    ];
	var store=new Ext.data.JsonStore({
		root: 'data' , 
		remoteSort: true,
		totalProperty:"totalCount", 
		id: 'id', 
		baseParams: { username: username },
		url: '/message/inbox_json',
		fields: fields
	});

    ///////////////// Message Single Row
	var message_data_store=new Ext.data.JsonStore({
		root: 'data' , 
		remoteSort: true,
		totalProperty:"totalCount", 
		id: 'id', 
		url: '/message/detail',
		fields: fields 
	});

Ext.override(Ext.form.HtmlEditor, {
	/**
	 * Set a readonly mask over the editor
	 * @param {Boolean} readOnly - True to set the read only property, False to switch to the editor
	 */
	setReadOnly: function(readOnly){
		if(readOnly){
			this.syncValue();			
			this.el.dom.readOnly = true;
		} else {
			if(this.rendered){
				this.wrap.unmask();
			}
			this.el.dom.readOnly = false;
		}
	},
   // private
    onRender : function(ct, position){
        Ext.form.HtmlEditor.superclass.onRender.call(this, ct, position);
        this.el.dom.style.border = '0 none';
        this.el.dom.setAttribute('tabIndex', -1);
        this.el.addClass('x-hidden');
        if(Ext.isIE){ // fix IE 1px bogus margin
            this.el.applyStyles('margin-top:-1px;margin-bottom:-1px;')
        }
        this.wrap = this.el.wrap({
            cls:'x-html-editor-wrap', cn:{cls:'x-html-editor-tb'}
        });

        this.createToolbar(this);
		
		this.tb.hide();
        var iframe = document.createElement('iframe');
        iframe.name = Ext.id();
        iframe.frameBorder = 'no';

        iframe.src=(Ext.SSL_SECURE_URL || "javascript:false");

        this.wrap.dom.appendChild(iframe);

        this.iframe = iframe;

        if(Ext.isIE){
            iframe.contentWindow.document.designMode = 'on';
            this.doc = iframe.contentWindow.document;
            this.win = iframe.contentWindow;
        } else {
            this.doc = (iframe.contentDocument || window.frames[iframe.name].document);
            this.win = window.frames[iframe.name];
            this.doc.designMode = 'on';
        }
        this.doc.open();
        this.doc.write(this.getDocMarkup())
        this.doc.close();

        var task = { // must defer to wait for browser to be ready
            run : function(){
                if(this.doc.body || this.doc.readyState == 'complete'){
                    Ext.TaskMgr.stop(task);
                    this.doc.designMode="on";
                    this.initEditor.defer(10, this);
                }
            },
            interval : 10,
            duration:10000,
            scope: this
        };
        Ext.TaskMgr.start(task);

        if(!this.width){
            this.setSize(this.el.getSize());
        }

		this.setReadOnly(this.readOnly);

    }
});
	
    var message_form = new Ext.FormPanel({
        url: '/role/update',
        title: _('Message'),
        region: 'south',
        collapsible: true,
		split: true,
        resizeable: true,
        height: 350,
        frame: true,
        labelWidth: 100, 
        defaults: { width: 850 },
        items: [
            {  xtype: 'hidden', name: 'id', value: -1 }, 
            {  xtype: 'textfield', name: 'subject', fieldLabel: '<% _loc('Subject') %>' }, 
            {  xtype: 'htmleditor', name: 'body', readOnly: true, height: 220, fieldLabel: '<% _loc('Message') %>' }
        ]
    });

    var message_view = function(id) {
        //////////////// Single message Data Load Event
        message_data_store.on('load', function(obj, rec, options ) {
            try {
                var rec = message_data_store.getAt(0);
                var ff = message_form.getForm();
                ff.loadRecord( rec );
            } catch(e) {
                Ext.Msg.alert("<% _loc('Error') %>", "<% _loc('Could not load message form data') %>: " + e.description );
            }
        });
        message_data_store.load({ params:{ id: id }});
    };

    <& /comp/search_field.mas &>

		var ps = 30; //page_size
		store.load({params:{start:0 , limit: ps}}); 

		// create the grid
		var grid = new Ext.grid.GridPanel({
            region: 'center',
			title: '<% _loc('Inbox') %>',
			header: false,
            stripeRows: true,
			autoScroll: true,
			autoWidth: true,
			iconCls: 'icon-inbox',
			store: store,
			viewConfig: [{
					forceFit: true
			}],
			selModel: new Ext.grid.RowSelectionModel({singleSelect:true}),
			loadMask:'true',
			columns: [
				{ header: '<% _loc('From') %>', width: 200, dataIndex: 'sender', sortable: true },	
				{ header: '<% _loc('Subject') %>', width: 300, dataIndex: 'subject', sortable: true },	
				{ header: '<% _loc('To') %>', width: 150, dataIndex: 'to', sortable: true, hidden: true },	
				{ header: '<% _loc('Message') %>', width: 300, dataIndex: 'body', sortable: true },	
				{ header: '<% _loc('Sent') %>', width: 150, dataIndex: 'sent', sortable: true } ,
				{ header: '<% _loc('Received') %>', width: 150, dataIndex: 'received', sortable: true, hidden: true }	
			],
			autoSizeColumns: true,
			deferredRender:true,
			bbar: new Ext.PagingToolbar({
								store: store,
								pageSize: ps,
								displayInfo: true,
								displayMsg: '<% _loc('Rows {0} - {1} de {2}') %>',
								emptyMsg: "No hay registros disponibles"
						}),        
			tbar: [ 'Buscar: ', ' ',
				new Ext.app.SearchField({
					store: store,
					params: {start: 0, limit: ps},
					emptyText: '<% _loc('<Enter your search string>') %>'
				}),
				new Ext.Toolbar.Button({
					text: '<% _loc('View') %>',
					icon:'/static/images/drop-yes.gif',
					cls: 'x-btn-text-icon',
					handler: function() {
						var sm = grid.getSelectionModel();
						if (sm.hasSelection()) {
							var sel = sm.getSelected();
                            message_view(sel.data.id);
						} else {
							Ext.Msg.alert('Error', '<% _loc('Select at least one row') %>');	
						};
					}
				}),
				new Ext.Toolbar.Button({
					text: _('Delete'),
					icon:'/static/images/del.gif',
					cls: 'x-btn-text-icon',
					handler: function() {
						var sm = grid.getSelectionModel();
						var sel = sm.getSelected();
						Ext.Msg.confirm('<% _loc('Confirmation') %>', '<% _loc('Are you sure you want to delete the message') %>' + ' <b>' + sel.data.subject + '</b>?', 
							function(btn){ 
								if(btn=='yes') {
									var conn = new Ext.data.Connection();
									conn.request({
										url: '/message/delete',
										params: { id_message: sel.data.id_message },
										success: function(resp,opt) { grid.getStore().remove(sel); },
										failure: function(resp,opt) { Ext.Msg.alert('<% _loc('Error') %>', '<% _loc('Could not delete the message') %>'); }
									});	
								}
							} );
					}
				}),
				'->'
				]
		});

	grid.getView().forceFit = true;

	grid.on("rowclick", function(grid, rowIndex, e ) {
			var row = grid.getStore().getAt(rowIndex);
            message_view( row.get('id') );
		});		
	
    var panel = new Ext.Panel({
        layout: 'border',
        items: [ grid, message_form ]
    });

	panel.setTitle(_("Inbox for %1", username) );
	return panel;
})();



