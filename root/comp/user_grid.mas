(function(){
	var store=new Ext.data.JsonStore({
		root: 'data' , 
		remoteSort: true,
		totalProperty:"totalCount", 
		id: 'id', 
		url: '/user/list',
		fields: [
			{  name: 'id' },
			{  name: 'username' },
			{  name: 'realname' },
			{  name: 'alias' },
			{  name: 'email' },
			{  name: 'phone' }
		],
		listeners: {
			'load': function(){
				init_buttons('disable');
				}
			}		
	});


	var ps = 100; //page_size
	store.load({params:{start:0 , limit: ps}});

	<& /comp/search_field.mas &>
	
	var init_buttons = function(action) {
		eval('btn_surrogate.' + action + '()');
		eval('btn_buzon.' + action + '()');
		eval('btn_edit.' + action + '()');
		eval('btn_delete.' + action + '()');
	}

	var btn_surrogate = new Ext.Toolbar.Button({
		text: _('Surrogate'),
		icon:'/static/images/users.gif',
		cls: 'x-btn-text-icon',
		disabled: true,
		handler: function() {
			var sm = grid.getSelectionModel();
			if (sm.hasSelection()) {
				var row = sm.getSelected();
				var username = row.data.username;
				Baseliner.message( _("Surrogate"), _("Surrogating as %1", username) );
				Ext.Ajax.request({
					url: '/auth/surrogate',
					params: { login: username },
					success: function(xhr) {
						document.location.href = document.location.href;
					},
					failure: function(xhr) {
						var err = xhr.responseText;
						Baseliner.message( _("Surrogate Error"), _("Error during surrogate: %1", err ));
					}
				});
			} 
		}
	});
				
	var btn_buzon = new Ext.Toolbar.Button({
		text: _('Inbox'),
		icon:'/static/images/icons/envelope.gif',
		cls: 'x-btn-text-icon',
		disabled: true,
		handler: function(){
			var sm = grid.getSelectionModel();
			if (sm.hasSelection()) {
				var row = sm.getSelected();
				var username = row.data.username;
				var title = _("Inbox for %1", username);
				Baseliner.addNewTabComp("/message/inbox?username=" + username, title );
			}
		}

	});

	var add_edit = function(rec) {
		var win;
	    	var form_user = new Ext.FormPanel({
			url: '/user/update',
			region: 'center',
			frame: true,
			labelWidth: 100,
			buttons: [
				{
				    text: _('Save'), handler: function(){
					var form = form_user.getForm();
					var action = form.getValues()['id'] >= 0 ? 'update' : 'add';
					 if (form.isValid()) {
						form.submit({
						    params: { action: action },
						    success: function(f,a){
							Baseliner.message('Success', a.result.msg );
							win.close();
							store.load();
						    },
						    failure: function(f,a){
							Ext.Msg.show({  
							    title: 'Information', 
							    msg: a.result.msg , 
							    buttons: Ext.Msg.OK, 
							    icon: Ext.Msg.INFO
							}); 						
						    }
						});
					 }
				    }
				}
			],
			items: [
				{ xtype: 'hidden', name: 'id', value: -1 }, 
				{ fieldLabel: _('User'), name: 'username', emptyText: 'Usuario', allowBlank:false, xtype: 'textfield', width: 350 },
				{ fieldLabel: _('Alias'), name: 'alias', emptyText: 'Alias', xtype: 'textfield', width: 350},		    
				{ fieldLabel: _('Name'), name: 'realname', emptyText: 'Full name', xtype: 'textfield', width: 350},
				{
					fieldLabel: _('Email address'),
					name: 'email',
					emptyText: 'usuario@dominio.com',
					vtype: 'email',
					xtype: 'textfield',
					width: 350
				},
				{
					fieldLabel: _('Phone Number'),
					name: 'phone',
					emptyText: 'xx-xxx-xx-xx',
					maskRe: /[\d\-]/,
					regex: /^\d{2}-\d{3}-\d{2}-\d{2}$/,
					regexText: 'Must be in the format xxx-xxx-xxxx',
					xtype: 'textfield',
					width: 350
				}
			]
		});
		
		if(rec){
			var ff = form_user.getForm();
			ff.loadRecord( rec );
		}

		var title = 'Create user';
		if(rec) title = 'Edit user';
		
		win = new Ext.Window({
		    title: _(title),
		    autoHeight: true,
		    width: 550,
		    closeAction: 'close',
		    items: form_user
		});
		
		 win.show();
	};
	
	//var user_view = function(rec) {
	//    var ff = form_user.getForm();
	//    ff.loadRecord( rec );
	//    win.show();
	//};	
 
        var btn_add = new Ext.Toolbar.Button({
                text: _('New'),
                icon:'/static/images/icons/add.gif',
                cls: 'x-btn-text-icon',
        	handler: function() {
			add_edit();
		}
        });
	
        var btn_edit = new Ext.Toolbar.Button({
		text: _('Edit'),
                icon:'/static/images/icons/edit.gif',
                cls: 'x-btn-text-icon',
		disabled: true,
                handler: function() {
			var sm = grid.getSelectionModel();
			if (sm.hasSelection()) {
				var sel = sm.getSelected();
				//user_view(sel);
				add_edit(sel);
			} else {
				Baseliner.message( _('ERROR'), _('Select at least one row'));    
			};
		}
        });
	
        var btn_delete = new Ext.Toolbar.Button({
			text: _('Delete'),
			icon:'/static/images/icons/delete.gif',
			cls: 'x-btn-text-icon',
			disabled: true,
			handler: function() {
				var sm = grid.getSelectionModel();
				var sel = sm.getSelected();
				Ext.Msg.confirm( _('Confirmation'), _('Are you sure you want to delete the user') + ' <b>' + sel.data.username + '</b>?', 
				function(btn){ 
					if(btn=='yes') {
						Baseliner.ajaxEval( '/user/update?action=delete',
							{ id: sel.data.id },
							function(response) {
								if ( response.success ) {
									grid.getStore().remove(sel);
									Baseliner.message( _('Success'), response.msg );
									init_buttons('disable');
								} else {
									Baseliner.message( _('ERROR'), response.msg );
								}
							}
						
						);
					}
				} );
			}
        });

	// create the grid
	var grid = new Ext.grid.GridPanel({
			title: _('Users'),
			header: false,
			stripeRows: true,
			autoScroll: true,
			autoWidth: true,
			store: store,
			viewConfig: [{
					forceFit: true
			}],
			selModel: new Ext.grid.RowSelectionModel({singleSelect:true}),
			loadMask:'true',
			columns: [
				{ header: _('Id'), hidden: true, dataIndex: 'id' },
				{ header: _('User'), width: 120, dataIndex: 'username', sortable: true, renderer: Baseliner.render_user_field },
				{ header: _('Name'), width: 350, dataIndex: 'realname', sortable: true },
				{ header: _('Alias'), width: 150, dataIndex: 'alias', sortable: true },
				{ header: _('Email'), width: 150, dataIndex: 'email'  },
				{ header: _('Phone'), width: 100, dataIndex: 'phone' }
			],
			autoSizeColumns: true,
			deferredRender:true,
			bbar: new Ext.PagingToolbar({
					store: store,
					pageSize: ps,
					displayInfo: true,
					displayMsg: _('Rows {0} - {1} of {2}'),
					emptyMsg: _('There are no rows available')
			}),        
			tbar: [ _('Search') + ': ', ' ',
				new Ext.app.SearchField({
					store: store,
					params: {start: 0, limit: ps},
					emptyText: _('<Enter your search string>')
				}),
% if ($c->stash->{can_surrogate}) { 
					btn_surrogate,
%}
				btn_buzon,
% if ($c->stash->{can_maintenance}) {
				btn_add,
				btn_edit,
				btn_delete,
%}
				'->'
			]
		});

		grid.on('rowclick', function(grid, rowIndex, columnIndex, e) {
			init_buttons('enable');
		});
			
	return grid;
})();



