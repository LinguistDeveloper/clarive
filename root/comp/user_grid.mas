(function(){
	var store=new Ext.data.JsonStore({
		root: 'data' , 
		remoteSort: true,
		totalProperty:"totalCount", 
		id: 'id', 
		url: '/user/list',
		fields: [
			{  name: 'id' },
			{  name: 'username' },
			{  name: 'realname' },
			{  name: 'alias' },
			{  name: 'email' },
			{  name: 'phone' }
		]
	});


	<& '/comp/search_field.mas' &>

	var ps = 100; //page_size
	store.load({params:{start:0 , limit: ps}}); 

	var Surrogate = new Ext.Toolbar.Button({
		text: _('Surrogate'),
		icon:'/static/images/users.gif',
		cls: 'x-btn-text-icon',
		disabled: true,
		handler: function() {
			var sm = grid.getSelectionModel();
			if (sm.hasSelection()) {
				var row = sm.getSelected();
				var username = row.data.username;
				Baseliner.message( _("Surrogate"), _("Surrogating as %1", username) );
				Ext.Ajax.request({
					url: '/auth/surrogate',
					params: { login: username },
					success: function(xhr) {
						document.location.href = document.location.href;
					},
					failure: function(xhr) {
						var err = xhr.responseText;
						Baseliner.message( _("Surrogate Error"), _("Error during surrogate: %1", err ));
					}
				});
			} 
		}
	});
				
	var Buzon = new Ext.Toolbar.Button({
		text: _('Inbox'),
		icon:'/static/images/icons/envelope.gif',
		cls: 'x-btn-text-icon',
		disabled: true,
		handler: function(){
			var sm = grid.getSelectionModel();
			if (sm.hasSelection()) {
				var row = sm.getSelected();
				var username = row.data.username;
				var title = _("Inbox for %1", username)
				Baseliner.addNewTabComp("/message/inbox?username=" + username, title );
			}
		}

	});


        var New = new Ext.Toolbar.Button({
                text: _('New'),
                icon:'/static/images/icons/add.gif',
                cls: 'x-btn-text-icon',
        	handler: function() {
				add_new();
			}
        });
	
        var Edit = new Ext.Toolbar.Button({
		text: _('Edit'),
                icon:'/static/images/icons/edit.gif',
                cls: 'x-btn-text-icon',
		disabled: true,
                handler: function() {
				var sm = grid.getSelectionModel();
				if (sm.hasSelection()) {
					var sel = sm.getSelected();
					baseline_view(sel);
				} else {
					Baseliner.message('Error', _('Select at least one row'));    
				};
			}
        });
	
        var Delete = new Ext.Toolbar.Button({
			text: _('Delete'),
			icon:'/static/images/icons/delete.gif',
			cls: 'x-btn-text-icon',
			disabled: true,
			handler: function() {
				var sm = grid.getSelectionModel();
				var sel = sm.getSelected();
				Ext.Msg.confirm( _loc('Confirmation'), _loc('Are you sure you want to delete the user') + ' <b>' + sel.data.username + '</b>?', 
				function(btn){ 
					if(btn=='yes') {
						Baseliner.ajaxEval( '/user/update?action=delete',
							{ id: sel.data.id },
							function(response) {
								if ( response.success ) {
									grid.getStore().remove(sel);
									alert(response.msg);
									Baseliner.message(_('Success'), _(response.msg));
								} else {
									Baseliner.message( _('ERROR'), _(response.msg) );
								}
							}
						
						);
					}
				} );
			}
        });

	
	var add_new = function() {
		var win;
	    	var form = new Ext.FormPanel({
			url: '/user/update',
			resizeable: true,
			height: 350,
			labelWidth: 100, 
			buttonAlign: 'left',
			bodyStyle:'padding: 5px 5px 5px 5px; background: none; border: none;',
			defaults: { width: 650 },
			items: [
			    { xtype: 'hidden', name: 'id', value: -1 }, 
			    { fieldLabel: _('User'), name: 'username', value: '', xtype: 'field', css: '', width: 350 },
			    { fieldLabel: _('Name'), name: 'realname', value: '', xtype: 'textfield', css: '' , width: 350},
			    { fieldLabel: _('Alias'), name: 'alias', value: '', xtype: 'textfield', css: '' , width: 350},
			    { fieldLabel: _('Email'), name: 'email', value: '', vtype: 'email', xtype: 'textfield', css: '' , width: 350},
			    { fieldLabel: _('Telephone'), name: 'phone', value: '', xtype: 'textfield', css: '' , width: 350},
			],
			fbar: {
			    items: [
				{
				    text: _('Save'), handler: function(){
					var action = form.getForm().getValues()['id'] >= 0 ? 'update' : 'add';
					form.getForm().submit({
					    params: { action: action },
					    success: function(f,a){
						Baseliner.message('Success', a.result.msg );
						win.close();
						store.load();
					    },
					    failure: function(f,a){
						Ext.Msg.alert('Warning', a.result.msg);
					    }
					});
				    }
				}
				//{ text: 'Reset', handler: function(){ form.getForm().reset(); } }
			    ]
			}
		    });

		win = new Ext.Window({
		    title: _('Create User'),
		    closeAction: 'close',
		    //modal: true,
		    items: form
		});
		 win.show();
	};
    

	// create the grid
	var grid = new Ext.grid.GridPanel({
			title: _('Users'),
			header: false,
			stripeRows: true,
			autoScroll: true,
			autoWidth: true,
			store: store,
			viewConfig: [{
					forceFit: true
			}],
			selModel: new Ext.grid.RowSelectionModel({singleSelect:true}),
			loadMask:'true',
			columns: [
				{ header: _('Id'), hidden: true, dataIndex: 'id' },
				{ header: _('User'), width: 120, dataIndex: 'username', sortable: true, renderer: Baseliner.render_user_field },
				{ header: _('Name'), width: 350, dataIndex: 'realname', sortable: true },
				{ header: _('Alias'), width: 150, dataIndex: 'alias', sortable: true }
			],
			autoSizeColumns: true,
			deferredRender:true,
			bbar: new Ext.PagingToolbar({
								store: store,
								pageSize: ps,
								displayInfo: true,
								displayMsg: _('Rows {0} - {1} of {2}'),
								emptyMsg: _('There are no rows available')
						}),        
			tbar: [ _('Search') + ': ', ' ',
				new Ext.app.SearchField({
					store: store,
					params: {start: 0, limit: ps},
					emptyText: _('<Enter your search string>')
				}),
				Surrogate,
				Buzon,
				New,
				Edit,
				Delete,
				'->'
				]
		});

		grid.on('rowclick', function(grid, rowIndex, columnIndex, e) {
			Surrogate.enable();
			Buzon.enable();
			Edit.enable();
			Delete.enable();
		});
			
	return grid;
})();



