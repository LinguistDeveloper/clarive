(function(){

	var store = new Ext.data.JsonStore({
		root: 'data' , 
		remoteSort: true,
		totalProperty:"totalCount", 
		id: 'id', 
		url: '/user/list',
		fields: [
			{  name: 'id' },
			{  name: 'username' },
			{  name: 'realname' },
			{  name: 'alias' },
			{  name: 'email' },
			{  name: 'phone' }
		],
		listeners: {
			'load': function(){
				init_buttons('disable');
				}
			}		
	});
	
	var store_roles = new Ext.data.JsonStore({
		root: 'data' , 
		remoteSort: true,
		totalProperty:"totalCount", 
		id: 'id', 
		url: '/role/json',
		fields: [ 
			{  name: 'id' },
			{  name: 'role' },
			{  name: 'actions' },
			{  name: 'description' },
			{  name: 'mailbox' }
		]
	});
	
	var store_user_roles_projects = new Ext.data.JsonStore({
	    root: 'data' , 
	    remoteSort: true,
	    totalProperty:"totalCount", 
	    id: 'id', 
	    url: '/user/infodetail',
	    fields: [ 
		{name: 'role' },
		{name: 'description' },
		{name: 'projects' }			
		]
	});	

	var ps = 100; //page_size
	store.load({params:{start:0 , limit: ps}});
	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////


	var render_rol_field  = function(value,metadata,rec,rowIndex,colIndex,store) {
	    if( value==undefined || value=='null' || value=='' ) return '';
	    var script = String.format('javascript:Baseliner.showAjaxComp("/user/infoactions/{0}")', value);
	    return String.format("<a href='{0}'>{1}</a>", script, value );
	};
    
	var render_projects = function (val){
	    if( val == null || val == undefined ) return '';
	    if( typeof val != 'object' ) return '';
	    var str = ''
	    for( var i=0; i<val.length; i++ ) {
		if( val[i].name){
		    str += String.format('{0} <br>', val[i].name);
		}else{
		    str += String.format('{0} <br>', _("All"));
		}
	    }
	    return str;
	}
	
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	<& /comp/search_field.mas &>
	
	var init_buttons = function(action) {
		eval('btn_surrogate.' + action + '()');
		eval('btn_buzon.' + action + '()');
		eval('btn_edit.' + action + '()');
		eval('btn_delete.' + action + '()');
	}

	var btn_surrogate = new Ext.Toolbar.Button({
		text: _('Surrogate'),
		icon:'/static/images/users.gif',
		cls: 'x-btn-text-icon',
		disabled: true,
		handler: function() {
			var sm = grid.getSelectionModel();
			if (sm.hasSelection()) {
				var row = sm.getSelected();
				var username = row.data.username;
				Baseliner.message( _("Surrogate"), _("Surrogating as %1", username) );
				Ext.Ajax.request({
					url: '/auth/surrogate',
					params: { login: username },
					success: function(xhr) {
						document.location.href = document.location.href;
					},
					failure: function(xhr) {
						var err = xhr.responseText;
						Baseliner.message( _("Surrogate Error"), _("Error during surrogate: %1", err ));
					}
				});
			} 
		}
	});
				
	var btn_buzon = new Ext.Toolbar.Button({
		text: _('Inbox'),
		icon:'/static/images/icons/envelope.gif',
		cls: 'x-btn-text-icon',
		disabled: true,
		handler: function(){
			var sm = grid.getSelectionModel();
			if (sm.hasSelection()) {
				var row = sm.getSelected();
				var username = row.data.username;
				var title = _("Inbox for %1", username);
				Baseliner.addNewTabComp("/message/inbox?username=" + username, title );
			}
		}

	});

	var add_edit = function(rec) {
		var win;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		var check_roles_sm = new Ext.grid.CheckboxSelectionModel({
			singleSelect: false,
			sortable: false,
			checkOnly: true
		});

		var grid_roles = new Ext.grid.GridPanel({
			title: _('Available Roles'),
			sm: check_roles_sm,
			store: store_roles,
			stripeRows: true,
			autoScroll: true,
			autoWidth: true,
			viewConfig: {
				forceFit: true
			},		    
			height:200,
			columns: [
				check_roles_sm,
				{ hidden: true, dataIndex:'id' }, 
				{ header: _('All'), width:250, dataIndex: 'role', sortable: true }
			],
			autoSizeColumns: true
			//deferredRender:true
		});
		
		var btn_delete_role = new Ext.Toolbar.Button({
				text: _('Delete Role'),
				icon:'/static/images/del.gif',
				cls: 'x-btn-text-icon',
				disabled: true,
				handler: function() {
				    var sm = grid_role.getSelectionModel();							
				    if (sm.hasSelection()) {
					var sel = sm.getSelected();
					grid_role.getStore().remove(sel);
					tree_check( treeRoot );
				    }
				}
		})
		
		var btn_delete_project = new Ext.Toolbar.Button({
			text: _('Delete Project'),
			icon:'/static/images/del.gif',
			cls: 'x-btn-text-icon',
			disabled: true,
			handler: function() {
			    var sm = grid_role.getSelectionModel();							
			    if (sm.hasSelection()) {
				var sel = sm.getSelected();
				grid_role.getStore().remove(sel);
				tree_check( treeRoot );
			    }
			}
		}) 
		
		var grid_user_roles_projects = new Ext.grid.GridPanel({
			title: _('Roles/Projects User '),
			stripeRows: true,
			autoScroll: true,
			autoWidth: true,
			store: store_user_roles_projects,
			viewConfig: {
				forceFit: true
			},
			selModel: new Ext.grid.RowSelectionModel({singleSelect:true}),
			loadMask:'true',
			columns: [
				{ header: _('Role'), width: 120, dataIndex: 'role', sortable: true, renderer: render_rol_field },	
				{ header: _('Description'), width: 350, dataIndex: 'description', sortable: true },
				{ header: _('Namespace'), width: 150, dataIndex: 'projects', sortable: false, renderer: render_projects }
			],
			autoSizeColumns: true,
			deferredRender:true,
			bbar: [
			       btn_delete_role,
			       btn_delete_project,
			    new Ext.Toolbar.Button({
				text: _('Delete All'),
				icon:'/static/images/del.gif',
				cls: 'x-btn-text-icon',
				disabled: true,
				handler: function() {
				    grid_role.getStore().removeAll();
				    tree_check( treeRoot );
				}
			    })
			],		    
			height:200
		});
		
		grid_user_roles_projects.on('rowclick', function(grid, rowIndex, columnIndex, e) {
			btn_delete_role.enable();
		});		
	
		var blank_image = new Ext.BoxComponent({autoEl: {tag: 'img', src: Ext.BLANK_IMAGE_URL}});
		
	
		var tree_check_folder_enabled = function(root) { // checks if parent folder has children
			var flag= grid_role.store.getCount()<1 ? false : true;
			root.eachChild( function(child) {
			    if( ! child.disabled ) {
				flag = false;
			    }
			});
			if( flag )  root.disable();
			else        root.enable();
		};
		
		var tree_check_in_grid = function(node) {
			var ff = grid_role.store.find('action', node.id );
			if( ff  >=0 ) { // check if its in the grid already
			    node.disable();
			} else {
			    node.enable();
			}
		};
	
		var tree_check = function(node) {
			if( node.isLeaf() ) {
			    //TODO: activar cuando metamos metodo que compruebe todas las bl
						//tree_check_in_grid( node );
			    //#########tree_check_folder_enabled(node.parentNode);
			} else {
			    node.eachChild( function(child) {
				if( child.isLeaf() ) {
				    tree_check( child );
				} else {
				    tree_check( child );
				    child.removeListener('expand', tree_check );
				    child.on({ 'expand': { fn: tree_check } });
				    if( child.hasChildNodes() )  {
					//##########tree_check_folder_enabled(child);
				    }
				}
			    });
			}
		};
		

		var tree_projects = new Ext.tree.TreePanel({
		    title: _('Available Projects'),
		    dataUrl: "user/projects_list",
		    split: true,
		    colapsible: true,
		    useArrows: true,
		    ddGroup: 'secondGridDDGroup',
		    animate: true,
		    enableDrag: true,
		    containerScroll: true,
		    autoScroll: true,
		    height:200,		    
		    rootVisible: true,
		    preloadChildren: true,
		    root: {
			nodeType: 'async',
			text: _('All'),
			draggable: false,
			checked: false,
			id: 'All',
			data: {
				project: '',
				id_project: 'todos',
				parent_checked: ''
			}
		    }
		});
		
		tree_projects.getLoader().on("beforeload", function(treeLoader, node) {
			var loader = tree_projects.getLoader();
			//if( node.attributes.url != undefined ) {
			//	loader.dataUrl = node.attributes.url;
			//}
			
			loader.baseParams = node.attributes.data;
			//if(node.attributes.data){
				node.attributes.data.parent_checked = (node.attributes.checked)?1:0;
			//}
		});
		
		tree_projects.on('checkchange', function(node, checked) {
			//node.attributes.data.parent_checked = checked;
			node.eachChild(function(n) {
				n.getUI().toggleCheck(checked);
			});
		});
		
		tree_projects.on('click', function(node, event){
			node.getUI().toggleCheck(!node.attributes.checked);
			//node.attributes.data.parent_checked = (!node.attributes.checked)?1:0;
			//node.attributes.data.parent_checked = 1;
				//alert(node.attributes.data.parent_checked);
		});


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	
	    	var form_user = new Ext.FormPanel({
			name: form_user,
			url: '/user/update',
			frame: true,
			labelWidth: 100,
			items: [
				{ xtype: 'hidden', name: 'id', value: -1 }, 
				{ fieldLabel: _('User'), name: 'username', emptyText: 'Usuario', allowBlank:false, xtype: 'textfield', width: 350 },
				{ fieldLabel: _('Alias'), name: 'alias', emptyText: 'Alias', xtype: 'textfield', width: 350},		    
				{ fieldLabel: _('Name'), name: 'realname', emptyText: 'Full name', xtype: 'textfield', width: 350},
				{
					fieldLabel: _('Email address'),
					name: 'email',
					emptyText: 'usuario@dominio.com',
					vtype: 'email',
					xtype: 'textfield',
					width: 350
				},
				{
					fieldLabel: _('Phone Number'),
					name: 'phone',
					emptyText: 'xx-xxx-xx-xx',
					maskRe: /[\d\-]/,
					regex: /^\d{2}-\d{3}-\d{2}-\d{2}$/,
					regexText: 'Must be in the format xxx-xxx-xxxx',
					xtype: 'textfield',
					width: 350
				},
				{
					xtype: 'panel',
					layout: 'column',
					items:  [
						{  
						columnWidth: .49,
						items:  grid_roles
						},
						{
						columnWidth: .02,
						items: blank_image
						},
						{  
						columnWidth: .49,
						items: tree_projects
					}]  
				},
				new Ext.Toolbar.Button({
				        text: _('Save'), handler: function(){
					var form = form_user.getForm();
					var action = form.getValues()['id'] >= 0 ? 'update' : 'add';
					var projects_checked = new Array();
					var roles_checked = new Array();
					check_roles_sm.each(function(rec){
						roles_checked.push(rec.get('id'));
					});							
					
					
					selNodes = tree_projects.getChecked();
					Ext.each(selNodes, function(node){
						projects_checked.push(node.attributes.data.id_project);
					});
					 if (form.isValid()) {
						form.submit({
						    params: { action: action,
							      projects_checked: projects_checked,
							      roles_checked: roles_checked
						    },
						    success: function(f,a){
							Baseliner.message('Success', a.result.msg );
							store_user_roles_projects.load({ params: {username: form.getValues()['username']} });
							//store_roles.load({params:{start:0 , limit: ps}});
							//tree_projects.root.reload();
							form.findField("id").setValue(a.result.user_id);
							
							//grid_roles.reload();
							//win.title = _"Edit user"
							//win.close();
							//store.load();
						    },
						    failure: function(f,a){
							Ext.Msg.show({  
							    title: 'Information', 
							    msg: a.result.msg , 
							    buttons: Ext.Msg.OK, 
							    icon: Ext.Msg.INFO
							}); 						
						    }
						});
					 }
				    }
				}),
				grid_user_roles_projects	
				
			]
		});
		
		var username = '';
		var title = 'Create user';
		
		if(rec){
			var ff = form_user.getForm();
			ff.loadRecord( rec );
			username = rec.get('username');
			title = 'Edit user';
		}

		win = new Ext.Window({
		    title: _(title),
		    autoHeight: true,
		    width: 730,
		    closeAction: 'close',
		    items: [
			    form_user
		    ]
		});
		store_roles.load({params:{start:0 , limit: ps}});
		store_user_roles_projects.load({ params: {username: username} });		
		win.show();
	};
	
 
        var btn_add = new Ext.Toolbar.Button({
                text: _('New'),
                icon:'/static/images/icons/add.gif',
                cls: 'x-btn-text-icon',
        	handler: function() {
			add_edit();
		}
        });
	
        var btn_edit = new Ext.Toolbar.Button({
		text: _('Edit'),
                icon:'/static/images/icons/edit.gif',
                cls: 'x-btn-text-icon',
		disabled: true,
                handler: function() {
			var sm = grid.getSelectionModel();
			if (sm.hasSelection()) {
				var sel = sm.getSelected();
				add_edit(sel);
			} else {
				Baseliner.message( _('ERROR'), _('Select at least one row'));    
			};
		}
        });
	
        var btn_delete = new Ext.Toolbar.Button({
			text: _('Delete'),
			icon:'/static/images/icons/delete.gif',
			cls: 'x-btn-text-icon',
			disabled: true,
			handler: function() {
				var sm = grid.getSelectionModel();
				var sel = sm.getSelected();
				Ext.Msg.confirm( _('Confirmation'), _('Are you sure you want to delete the user') + ' <b>' + sel.data.username + '</b>?', 
				function(btn){ 
					if(btn=='yes') {
						Baseliner.ajaxEval( '/user/update?action=delete',
							{ id: sel.data.id,
							  username: sel.data.username
							},
							function(response) {
								if ( response.success ) {
									grid.getStore().remove(sel);
									Baseliner.message( _('Success'), response.msg );
									init_buttons('disable');
								} else {
									Baseliner.message( _('ERROR'), response.msg );
								}
							}
						
						);
					}
				} );
			}
        });


	// create the grid
	var grid = new Ext.grid.GridPanel({
			title: _('Users'),
			header: false,
			stripeRows: true,
			autoScroll: true,
			autoWidth: true,
			store: store,
			viewConfig: {
				forceFit: true
			},
			selModel: new Ext.grid.RowSelectionModel({singleSelect:true}),
			loadMask:'true',
			columns: [
				{ header: _('Id'), hidden: true, dataIndex: 'id' },
				{ header: _('User'), width: 120, dataIndex: 'username', sortable: true, renderer: Baseliner.render_user_field },
				{ header: _('Name'), width: 350, dataIndex: 'realname', sortable: true },
				{ header: _('Alias'), width: 150, dataIndex: 'alias', sortable: true },
				{ header: _('Email'), width: 150, dataIndex: 'email'  },
				{ header: _('Phone'), width: 100, dataIndex: 'phone' }
			],
			autoSizeColumns: true,
			deferredRender:true,
			bbar: new Ext.PagingToolbar({
					store: store,
					pageSize: ps,
					displayInfo: true,
					displayMsg: _('Rows {0} - {1} of {2}'),
					emptyMsg: _('There are no rows available')
			}),        
			tbar: [ _('Search') + ': ', ' ',
				new Ext.app.SearchField({
					store: store,
					params: {start: 0, limit: ps},
					emptyText: _('<Enter your search string>')
				}),
% if ($c->stash->{can_surrogate}) { 
					btn_surrogate,
%}
				btn_buzon,
% if ($c->stash->{can_maintenance}) {
				btn_add,
				btn_edit,
				btn_delete,
%}
				'->'
			]
		});

		grid.on('rowclick', function(grid, rowIndex, columnIndex, e) {
			init_buttons('enable');
		});
			
	return grid;
})();



