(function(){
  var add_form, add_window, column_action, column_active, column_bl, column_chain, column_desc, column_init, column_job, column_ns, el_active, el_button_cancel, el_button_ok, el_desc, el_job_type, el_name, el_paging_tb, el_searchfield, el_text, fn_update, grid, ps, render_name, render_plugin, store, toolbar_delete, toolbar_details, toolbar_switch, yesno;
  store = new Ext.data.JsonStore({
		root: 'data' , 
		remoteSort: true,
    totalProperty: 'totalCount',
		id: 'rownum', 
		url: '/chain/list',
		fields: [ 
      {
        name: 'id'
      }, {
        name: 'name'
      }, {
        name: 'description'
      }, {
        name: 'job_type'
      }, {
        name: 'active'
      }, {
        name: 'ns'
      }, {
        name: 'action'
      }, {
        name: 'bl'
      }
		]
	});
  <& /comp/search_field.mas &>;
  render_name = function(value, metadata, rec, rowIndex, colIndex, store) {
		return "<div style='font-weight:bold; font-size: 16px;'>" + value + "</div>" ;
    };
  render_plugin = function(value, metadata, rec, rowIndex, colIndex, store) {
		return "<img alt='"+value+"' border=0 style='vertical-align: top; margin: 0 0 10 2;' src='/static/images/icons/chain.jpg' />" ;
    };
  ps = 15;
  store.load({
    params: {
      start: 0,
      limit: ps
    }
  });
  yesno = new Ext.data.SimpleStore({
    fields: ['active', 'name'],
    data: [[true, _('Yes')], [false, _('No')]]
  });
  el_name = {
    name: 'name',
    fieldLabel: _('Name'),
    value: '',
    xtype: 'field',
    css: '',
    width: 350,
    allowBlank: false
  };
  el_desc = {
    name: 'description',
    fieldLabel: _('Description'),
    value: '',
    xtype: 'textarea',
    css: '',
    width: 350
  };
  el_active = {
    name: 'active',
    fieldLabel: _('Active'),
    xtype: 'combo',
    value: true,
    hiddenName: 'active',
    typeAhead: true,
    valueField: 'active',
    displayField: 'name',
    mode: 'local',
    store: yesno,
    forceSelection: true,
    triggerAction: 'all',
    editable: false,
    css: '',
    width: 350
  };
  el_job_type = {
    name: 'job_type',
    fieldLabel: _('Job Type'),
    value: '',
    xtype: 'textfield',
    css: '',
    width: 350
  };
  add_form = new Ext.FormPanel({
        url: '/chain/create',
		frame: true,
        height: '100%',
    items: [el_name, el_desc, el_active, el_job_type]
	});
  el_button_ok = {
    xtype: 'button',
    text: _('OK'),
                cls: 'x-btn-text-icon',
                handler: function(){
      var form, name;
      form = add_form.getForm();
      if (form.findField('job_type').getValue() === '') {
        name = form.findField('name').getValue();
        name = name.replace(/\s/, '_');
                        form.findField('job_type').setValue(name.toLowerCase());
                    }
      return add_form.getForm().submit({
                        success: function(form, action) {
                            Baseliner.message(_('Saved'), action.result.msg );
          return add_window.hide();
        },
                        failure: function(form, action) {
                                    Ext.Msg.alert(_('Error'), action.result.msg );
          return login_form.getForm().findField('name').focus('', 100);
                                 }
                    });
                }
  };
  el_button_cancel = {
    xtype: 'button',
    text: _('Cancel'),
                icon:'/static/images/del.gif',
                cls: 'x-btn-text-icon',
                handler: function(){
      return add_window.hide();
            }
  };
  add_window = new Ext.Window({
    title: _('New Chain'),
    heignt: 300,
    closeAction: 'close',
    tbar: ['->', el_button_ok, el_button_cancel],
        width: 500,
        items: add_form
    });
  column_init = {
    width: 40,
    sortable: false,
    renderer: render_plugin
  };
  column_chain = {
    header: _('Chain'),
    width: 280,
    dataIndex: 'name',
    sortable: true,
    renderer: render_name
  };
  column_desc = {
    header: _('Description'),
    width: 200,
    dataIndex: 'description',
    sortable: true
  };
  column_active = {
    header: _('Active'),
    width: 100,
    dataIndex: 'active',
    sortable: true,
    renderer: Baseliner.render_active
  };
  column_job = {
    header: _('Job Type'),
    width: 100,
    dataIndex: 'job_type',
    sortable: true
  };
  column_action = {
    header: _('Action'),
    width: 100,
    dataIndex: 'action',
    sortable: 'true'
  };
  column_ns = {
    header: _('Namespace'),
    width: 100,
    dataIndex: 'ns',
    sortable: true
  };
  column_bl = {
    header: _('Baseline'),
    width: 350,
    dataIndex: 'bl',
    sortable: true
  };
  el_paging_tb = new Ext.PagingToolbar({
                            store: store,
                            pageSize: ps,
                            displayInfo: true,
                            displayMsg: 'Rows {0} - {1} de {2}',
                            emptyMsg: "No hay registros disponibles"
  });
  el_searchfield = new Ext.app.SearchField({
                store: store,
    params: {
      start: 0,
      limit: ps
    },
                emptyText: '<% _loc('<Enter your search string>') %>'
  });
  el_text = {
                text: _('Add'),
                icon:'/static/images/icons/add.png',
                cls: 'x-btn-text-icon',
                handler: function() {
      var sm;
      sm = grid.getSelectionModel();
      return add_window.show();
                }
  };
  toolbar_details = {
                text: _('Details'),
                icon:'/static/images/chromium/databaseTable.png',
                cls: 'x-btn-text-icon',
                handler: function() {
      var sel, sm;
      sm = grid.getSelectionModel();
      if (sm.hasSelection()) {
        sel = sm.getSelected();
        return Baseliner.addNewTabComp("/chain/edit_test?id=" + sel.data.id, sel.data.name);
                    } else {
        return Ext.Msg.alert('Error', _('No rows selected'));
      }
    }
                    };
  fn_update = function(btn) {
    var conn;
    if (btn === 'yes') {
      conn = new Ext.data.Connection;
      return conn.request({
        url: '/chain/update/',
        params: {
          action: 'delete',
          id: sel.data.id
        },
        success: function(resp, opt) {
          return grid.getStore().remove(sel);
        },
        failure: function(resp, opt) {
          return Ext.Msg.alert(_('Error'), _('Could not delete the chain.'));
                }
      });
    }
  };
  toolbar_switch = {
                text: _('Switch'),
                icon:'/static/images/silk/arrow_switch.png',
                cls: 'x-btn-text-icon',
                handler: function() {
      var sel, sm;
      sm = grid.getSelectionModel();
      sel = sm.getSelected();
      return Ext.Msg.confirm(_('Confirmation'), _('Are you sure you want to turn off the chain') + sel.data.name + '?', fn_update);
                }
  };
  toolbar_delete = new Ext.Toolbar.Button({
                text: _('Delete'),
                icon:'/static/images/del.gif',
                cls: 'x-btn-text-icon',
                handler: function() {
      var sel, sm;
      sm = grid.getSelectionModel();
      sel = sm.getSelected();
      return Ext.Msg.confirm(_('Confirmation'), _('Are you sure you want to delete the chain') + sel.data.name + '?', fn_update);
                            }
                        } );
  grid = new Ext.grid.GridPanel({
    header: false,
    stripeRows: true,
    autoScroll: true,
    autoWidth: true,
    store: store,
    viewConfig: [
      {
        forceFit: 'true'
                }
    ],
    selModel: new Ext.grid.RowSelectionModel({
      singleSelect: true
            }),
    loadMask: 'true',
    columns: [column_init, column_chain, column_desc, column_active, column_job, column_action, column_ns, column_bl],
    autoSizeColumns: true,
    deferredRender: true,
    bbar: el_paging_tb,
    tbar: [el_searchfield, el_text, toolbar_details, toolbar_switch, toolbar_delete, '->']
  });
  grid.on('rowdblclick', function(grid, rowIndex, e) {
    var r;
    r = grid.getStore().getAt(rowIndex);
    return Baseliner.addNewTab('/chain/edit?id=' + r.get('id'), r.get('name'));
    });		
  grid.on('activate', function() {
    return grid.setTitle("<% _loc('Job Chains') %>");
    });
	return grid;
}).call(this);