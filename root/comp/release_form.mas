<%init>
    use Baseliner::Utils;
    my $iid = "div-" . _nowstamp();

</%init>
<%perl>

</%perl>
<style>
    .rfc_disabled {  color: #202090; background-color: #D0D0D0 none repeat scroll 0 0 !important; };
</style>
<script type='text/javascript'>
try {
Ext.onReady(function(){
    Ext.QuickTips.init();

    var last_valid_value=""; 
    var id_release = '<% $c->stash->{id} %>';
    var can_edit = '<% $c->stash->{can_edit} %>';
    var why_not = '<% $c->stash->{why_not} %>';
    var updating = '<% $c->stash->{id} %>' != '' ? true : false ; 
    var submitting = false;

    var bl_edit = '<% $c->stash->{bl} %>';
    var readonly_all = <% $c->stash->{can_edit} ? 'false' : 'true' %>;

    var state_bl_map =  <% js_dumper( $c->stash->{state_bl_map} ) %>;
    var bl_state_map =  <% js_dumper( $c->stash->{bl_state_map} ) %>;

    var release_states = new Ext.data.SimpleStore({ 
       fields: ['id','state'], 
       data : <% js_dumper( $c->stash->{release_states} ) %>
    }); 
    var release_state = bl_edit ? bl_state_map[bl_edit] : release_states.getAt(0).data.state;

    var baselines = new Ext.data.SimpleStore({ 
       fields: ['bl', 'name'], 
       data : <% js_dumper( $c->stash->{baselines} ) %>
    }); 

    //***** Applications
    var ns_store = new Baseliner.JsonStore({
        root: 'data' , 
        remoteSort: true,
        totalProperty:"totalCount", 
        //baseParams: { mask: '^' },
        id: 'rownum', 
        url: '/user/application_json',
        fields: [ 
            {  name: 'name' },
            {  name: 'ns' }
        ]
    });
    var app_combo = Baseliner.combo_project();
    app_combo.on('change', function(){
        rfc_field.markInvalid( _("Pendiente de validar") );
        rfc_field.validate();
    });

    ns_store.load();

    //    bd.createChild({tag: 'h2', html: 'Select the release contents'});
    //------- Search Combo
    var colModel = new Ext.grid.ColumnModel([
        {id:'item',header: _('Release Item'), width: 200, sortable: true, locked:false, dataIndex: 'item'},
        {header: _('Item Type'), width: 125, sortable: true, dataIndex: 'ns_type'},
        {header: _('User'), width: 75, sortable: true, dataIndex: 'user'},
        {header: _('Location'), width: 85, sortable: true, dataIndex: 'ns' },
        {header: _('Last Updated'), width: 85, sortable: true, dataIndex: 'date' },
        {header: _('Description'), width: 350, sortable: true, dataIndex: 'text'}
    ]);
% unless( $c->stash->{id} ) {
    // it's a new form
    var ds_grid = new Ext.data.Store({});
% } else {
    // get form contents
    var ds_grid = new Baseliner.JsonStore({
            root: 'data' , 
            remoteSort: false,
            baseParams: { id: id_release },
            url: '/release/contents/json',
            fields: [ 'item', 'provider', 'ns', 'ns_name', 'ns_type', 'provider', 'date', 'user', 'icon' ]
    });
    ds_grid.load();
% }

    var render_icon = function(v) {
        if( v==undefined ) v="/static/images/icons/release.gif";
        return '<img src="' + v + '" />';
    };
    var render_bold = function(v) {
        return '<b>' + v + '</b>';
    };
    var jc_grid = new Ext.grid.GridPanel({
        width: 800,
        height: 300,
        style: 'margin-top: 20px',
        name: 'jc',
        enableDD: true, 
        ddGroup: 'explorer_dd',
        title: _('Release Contents'),
        border: true,
        ds: ds_grid,
        cm: new Ext.grid.ColumnModel([
            { width: 30, dataIndex: 'icon', renderer: render_icon },
            {id:'item',header: _('Release Item'), width: 200, sortable: true, locked:false, dataIndex: 'item', renderer: render_bold },
            {header: _('Item Type'), width: 125, sortable: true, dataIndex: 'ns_type'},
            {header: _('User'), width: 75, sortable: true, dataIndex: 'user'},
            {header: _('Location'), width: 85, sortable: true, dataIndex: 'ns' },
            {header: _('Last Updated'), width: 85, sortable: true, dataIndex: 'date' },
            {header: _('Description'), width: 350, sortable: true, dataIndex: 'text'}
        ])
    });

    jc_grid.on('viewready', function() {
        var drop_target = new Baseliner.DropTarget(jc_grid.getEl(), {
                comp: jc_grid,
                ddGroup    : 'explorer_dd',
                notifyDrop : function(dd, e, data){
                    var n = dd.dragData.node;
                    var s = jc_grid.store;
                    var add_node = function(node ) {
                        var data = node.attributes.data;
                        var rec = new Ext.data.Record({
                            ns: data.ns || node.text,
                            icon: data.icon,
                            ns_name: data.ns || node.text,
                            ns_type: data.ns_type || node.text,
                            item: node.text,
                            description: data.description
                        });
                        s.add(rec);
                        Baseliner.message( _('Release'), _( "Added %1 to release", node.text ) );
                    };
                    add_node( n );
                    /* if( n.leaf ) {
                        add_node(n);
                    } else {
                        n.expand();
                        n.eachChild( function(child) {
                            if( ! child.disabled ) 
                                add_node( child );
                        });
                    } */
                    return true;
                }
        });
   }); 

    var tb = new Ext.Toolbar({
            style: 'margin: 3px',
            items: [ 
% if( $c->stash->{can_edit} ) {
                {
                    xtype: 'button',
                    text:  _('Remove Release Item'),
                    icon:'/static/images/del.gif',
                    cls: 'x-btn-text-icon',
                    handler: function() {
                        var sm = jc_grid.getSelectionModel();
                        var sel = sm.getSelected();
                        if( ! sm.hasSelection() ) return;
                        if( sm.hasNext() ) sm.selectNext();
                        else if( sm.hasPrevious() ) sm.selectPrevious();
                        jc_grid.getStore().remove(sel);
                        sm.selectNext();
                    }
                },
            '->',
            { xtype:'button',text:_('Reset'),
                icon:'/static/images/asterisk.gif',
                cls: 'x-btn-text-icon',
                handler: function() { 
                    // two-state reset button: first the rfc+content, second, the rest
                    if( rfc_field.getValue() != '' ) {
                        jc_grid.getStore().removeAll();
                        rfc_field.enable();
                        rfc_field.setValue('');
                        rfc_field.getEl().dom.removeAttribute('readOnly');
                    } else {
                        jc_grid.getStore().removeAll();
                        rfc_field.enable();
                        rfc_field.getEl().dom.removeAttribute('readOnly');
                        main_form.getForm().reset();
                    }
                }  
            },
            { xtype:'button',text:_('Cancel'),
                icon:'/static/images/drop-no.gif',
                cls: 'x-btn-text-icon',
                handler: function() { 
                    Baseliner.closeCurrentTab(); 
                }  
            },
            { xtype:'button', text: _('Validate'),
                icon:'/static/images/drop-yes.gif',
                cls: 'x-btn-text-icon',
                handler: function(){
                    last_valid_value = ''; // force alert
                    rfc_field.markInvalid( _("Pendiente de validar") );
                    rfc_field.getEl().dom.removeAttribute('readOnly');
                    rfc_field.validateValue( rfc_field.getValue() );    
                }
            },
            { xtype:'button', text: updating ? _('Save') : _('Create'),
                icon:'/static/images/scm/debug/write_obj.gif',
                cls: 'x-btn-text-icon',
                handler: function(){
                    // turn grid into JSON to post data
                    var cnt = jc_grid.getStore().getCount();
                    if( cnt == 0 && ! updating ) {
                        //Ext.Msg.show({icon: 'ext-mb-error', buttons: { cancel: true }, title: "Form error", msg: "<% _loc('Missing release contents') %>"});
                        Ext.Msg.confirm(_('Confirmation'), _('Create an empty release?'), 
                            function(btn){ if(btn=='yes') form_submit(); });
                    } else {
                        form_submit();
                    }
                }
            }
% } else {
          '->',
          '<table><tr style="height:20px">'
          + '<td><img src="/static/images/asterisk.gif" style="vertical-align: middle;" ></td>'
          + '<td><span style="font-weight:bold; font-size: 12px;">'
          + _('Release is closed: %1', _(why_not) )
          + '</span></td>'
          + '</tr></table>'
% } # can_edit
            ] 
    });

    var rfc_valid = 0; 
    var rfc_last = "";
    var rfc_validator = function(value){
        if( rfc_valid == 1 && rfc_last==value ) return true;
        rfc_last = value;
        try {
            var app = main_form.getForm().findField('ns').getValue() ;
            if( app == "" ) { 
                return 'Seleccione una aplicación para poder validar este campo.';
            }
            if( submitting ) {
                return true; //let the submit controller do the checking
            }
            Ext.Ajax.request({
                url: '/gbp/release/check_rfc',
                params: { rfc: value, application: app },
                success: function(xhr) {
                    var res = xhr.responseText;
                    var data = Ext.util.JSON.decode( res );
                    if( data.success ) {
                        rfc_field.clearInvalid();
                        rfc_valid = 1;
                    } else {
                        rfc_field.markInvalid( data.msg );
                        var str_curr = value+','+app;
                        if( false && str_curr != last_valid_value ) { // avoid too many alerts
                            try {
                                Ext.Msg.alert( _('Error'), "RFC:<br><pre>"+ data.msg + '<br>' + ( data.details || '' ) ); 
                            } catch(e) { };
                        }
                        last_valid_value = str_curr;
                        rfc_valid = -1;
                    }
                },
                failure: function(xhr) {
                    var res = xhr.responseText;
                    rfc_field.markInvalid('No se ha podido conectar con el servidor.');
                }
            });
            return 'Verificando RFC...';    
        } catch(e) {
            // in case we're loading this with data from the beginning
            return true;
        }
    };
    
    var rfc_field = new Ext.form.TextField( { 
        fieldLabel: _('RFC'), 
        allowBlank: false,
        qtip: _("Se filtraran los paquetes por este campo"),
        readOnly: updating,
        disabledClass: 'rfc_disabled',
        validator: rfc_validator,
        width: 400,
        value: '<% $c->stash->{rfc} %>',
        name: 'rfc' 
    });

    if( rfc_field.getValue()!=undefined && rfc_field.getValue().length > 0 ) {
        rfc_field.disable();
    }

    rfc_field.on('change', function(f,new_value,old_value){
        //rfc_field.getEl().innerHTML );    
    });

    var form_submit = function() {
            var json = [];
            submitting = true;
            var cnt = jc_grid.getStore().getCount();
            for( i=0; i<cnt; i++) {
                var rec = jc_grid.getStore().getAt(i);
                json.push({ ns: rec.data.ns, item: rec.data.item });
                //json.push( rec.data ) ;
            }
            var json_res = Ext.util.JSON.encode( json );
            rfc_field.enable();
            main_form.getForm().submit({
                params: { release_contents: json_res },
                success: function(form,action){
                    Baseliner.message("<% _loc('Release') %>", action.result.msg);
                    main_form.getForm().reset();
                    jc_grid.getStore().removeAll();
                    Baseliner.closeCurrentTab(); 
                },
                failure: function(form,action){
                    if ( action.failureType != "client" ) {
                        submitting = false;
                        
                        Ext.Msg.show({ title: "<% _loc('Failure') %>", msg: action.result.msg, width: 500, buttons: { ok: true } });
                        rfc_field.disable();
                    }
                }
            });
    };

    var field_id = new Ext.form.Hidden({ name: 'id_rel', value: '<% $c->stash->{id} %>' });

    var store_tasks =new Baseliner.JsonStore({
        root: 'data', 
        remoteSort: true,
        totalProperty:"totalCount", 
        id: 'id', 
        url: '/tasks/json',
        fields: [ 'name', 'category', 'assigned', 'description' ]
    });
    
    var tpl2 = new Ext.XTemplate( '<tpl for=".">{name}</tpl>' );
    var conf;
    var combo_tasks = new Ext.ux.form.SuperBoxSelect({
        allowBlank: true,
        width: 400,
        msgTarget: 'under',
        allowAddNewData: true,
        addNewDataOnBlur: true, 
        //emptyText: _('Enter or select the category tags'),
        triggerAction: 'all',
        resizable: true,
        store: store_tasks,
        mode: 'remote',
        fieldLabel: _('Tasks'),
        typeAhead: true,
        name: 'name',
        displayField: 'name',
        hiddenName: 'name',
        valueField: 'name',
        displayFieldTpl: tpl2,
        extraItemCls: 'x-tag',
        listeners: {
            newitem: function(bs,v, f){
                v = v.slice(0,1).toUpperCase() + v.slice(1).toLowerCase();
                var newObj = {
                    id: v,
                    name: v
                };
                bs.addItem(newObj);
            }
        }
     });

    var main_form = new Ext.FormPanel({ 
             url: '/release/update', 
             renderTo: 'releaseForm<% $iid %>',
             frame: true, 
             title: _('Release Options'),
             width: 900, 
             items: [
                 tb,
                  field_id,
                  { xtype: 'hidden', name: 'contents', value: '<% $c->stash->{contents} %>' },
                  { xtype: 'hidden', name: 'bl', value: '<% $c->stash->{bl} %>' },
                  app_combo, combo_tasks, 
                  { 
                    xtype: 'textfield', 
                    fieldLabel: _('Texto Libre'),
                    allowBlank: false,
                    width: 400,
                    name: 'text' 
                  },
                  {
                       xtype: 'combo', 
                       name: 'state', 
                       hiddenName: 'state',
                       fieldLabel: _('State'), 
                       mode: 'local', 
                       store: release_states, 
                       valueField: 'state',
                       value: release_state ,
                       displayField:'state', 
                       editable: false,
                       readOnly: readonly_all,
                       forceSelection: true,
                       triggerAction: 'all',
                       allowBlank: false,
                       listeners: {
                           select: { fn: function(){
                               ds_combo.removeAll();
                               jc_grid.getStore().removeAll();
                           } }
                        },
                       width: 300 
                  },
                  { 
                    xtype: 'textarea', 
                    fieldLabel: _('Comments'), 
                    width: 500,
                    name: 'description' 
                  },
                  jc_grid
              ] 
          }); 

    Ext.form.Field.prototype.msgTarget = 'side';

    //-------------
    var ds_combo = new Ext.data.Store({
        proxy: new Ext.data.HttpProxy({
            url: '/release/items/json',
            param: { states: [ main_form.getForm().findField('state').getValue() ] }
        }),
        listeners: {
            beforeload: {
                fn: function(store,opt) {
                    var state = main_form.getForm().findField('state').getValue(); 
                    var release_type = main_form.getForm().getValues()['release_type'];
                    if( state == "Preproducción" ) {
                        store.baseParams.bl = "PREP";
                    } else {
                        store.baseParams.bl = "DESA";
                        store.baseParams.states = [ state ];
                    }
                    main_form.getForm().findField('bl').setValue( store.baseParams.bl );
                    store.baseParams.release_type = release_type;
                    store.baseParams.rfc = rfc_field.getValue();
                }
            },
            load: {
                fn: function(store,opt) {
                    if( store.getTotalCount() == 0 ) {
                        Baseliner.message("<% _loc('Warning') %>", "<% _loc('No records found') %>");
                    }
                }
            }
        },
        reader: new Ext.data.JsonReader({
            root: 'data',
            totalProperty: 'totalCount',
            id: 'id'
        }, [
            {name: 'provider', mapping: 'provider'},
            {name: 'item', mapping: 'item'},
            {name: 'user', mapping: 'user'},
            {name: 'ns', mapping: 'ns'},
            {name: 'rfc', mapping: 'rfc'},
            {name: 'app', mapping: 'app'},
            {name: 'why_not', mapping: 'why_not'},
            {name: 'can_job', mapping: 'can_job'},
            {name: 'date', mapping: 'date'},
            {name: 'icon', mapping: 'icon'},
            {name: 'data', mapping: 'data'},
            {name: 'text', mapping: 'text'}
        ])
    });

    ds_combo.on("load", function(s) {
        var del = [];
        s.each(function( rec ){
            var ix = ds_grid.find("item", rec.data.item );
            if( ix != -1 ) {
                //del.push( rec.data.item );    
                s.remove(rec);
            }
        });
            
    });
            // {name: 'lastPost', mapping: 'post_time', type: 'date', dateFormat: 'timestamp'},
            //'<h3><span>{lastPost:date("M j, Y")}<br />by {author}</span>{title}</h3>',

    // Search Combo: Custom rendering Template
    var resultTpl = new Ext.XTemplate(
        '<tpl for="."><div class="search-item {recordCls}">',
            '<h3><span>{ns_type}<br />{user}</span><img src="{icon}" />{item}</h3>',
            '{text}',
            '<tpl if="why_not">',
                '<br />{why_not}',
            '</tpl>',
        '</div></tpl>'
    );
    
    // Add item from combo into release content grid
    var add_item = function (record) { 
            if( record.get('can_job') != 1 ) {
                Ext.Msg.show({icon: 'ext-mb-error',
                    buttons: { cancel: true },
                    title: _('Blocked'),
                    msg: _('Item cannot be added to release') + ":<br>" + record.get('why_not')
                });
                return false;
            }
            var rfc = record.get('rfc');
            var rfc_curr = rfc_field.getValue();
            if( rfc_curr && rfc != rfc_curr ) {
                Baseliner.message(_("Error"), _("RFC %1 does not match current %2", rfc, rfc_curr ) );
                ds_combo.remove(record);
            } else {
                if( app_combo.getValue() == '' ) {
                    app_combo.setValue( record.get('app') );
                }
                rfc_field.setValue( record.get('rfc') );
                rfc_field.clearInvalid();
                rfc_field.disable();
                ds_grid.add(record);    // add to release items grid
                ds_combo.remove(record);  // take it off from current combo list
            }
    };

    var search = new Ext.form.ComboBox({
        store: ds_combo,
        minChars :3,
        displayField:'item',
        typeAhead: false,
        resizable: true,
        readOnly: <% $c->stash->{can_edit} ? 'false' : 'true' %>,
        loadingText: '<% _loc('Searching...') %>',
        width: 550,
        pageSize: 20,
        hideTrigger:true,
        tpl: resultTpl,
        applyTo: 'search<% $iid %>',
        itemSelector: 'div.search-item',
        listeners: {
            // delete the previous query in the beforequery event or set
            // combo.lastQuery = null (this will reload the store the next time it expands)
            beforequery: function(qe){
                delete qe.combo.lastQuery;
            }
        },
        onSelect: add_item
    });

    //----------| Load form data
    if( updating ) {
        var form_store = new Baseliner.JsonStore({
            root: 'data' , 
            remoteSort: false,
            baseParams: { id: id_release },
            url: '/release/load',
            fields: [ 'id', 'name', 'text', 'description', 'bl', 'ns', 'can_edit', 'rfc' ] 
        });
        //main_form.el.mask( _('Loading...'), 'x-mask-loading');
        Baseliner.showCustomMask( main_form , _('Loading...') )
        form_store.load();
        form_store.on( 'load', function() {
            var rec = form_store.getAt(0).data;
            main_form.getForm().setValues( rec );
            main_form.el.unmask();
        });
    }

    if( Ext.isIE ) document.getElementById('search<% $iid %>').style.top = 0; // hack fix
});
} catch(e) {
    Baseliner.errorWin('Error', ""+e );
}
</script>


<div class='tab-style' style="width:600px;">
    <div class="x-box-tl">
        <div class="x-box-tr">
            <div class="x-box-tc"></div>
        </div>
    </div>
    <div class="x-box-ml">
        <div class="x-box-mr">
            <div class="x-box-mc">
                <h3 style="margin-bottom:5px;"><% _loc('Add Release Items') %></h3>
                <input type="text" size="40" name="search<% $iid %>" id="search<% $iid %>" />
                <div style="padding-top:4px;"><% _loc('Live search requires a minimum of %1 characters.', 3) %></div>
            </div>
        </div>
    </div>
    <div class="x-box-bl">
        <div class="x-box-br">
            <div class="x-box-bc"></div>
        </div>
    </div>
</div>

<div class='tab-style' id='releaseForm<% $iid %>'></div>



