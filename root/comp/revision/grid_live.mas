(function(){
    var ps = 50;

     var reader = new Ext.data.JsonReader({
            root: 'data',
            remoteSort: true,
            totalProperty: 'totalCount',
            id: 'id'
        },
        [
            {name: 'provider' },
            {name: 'related' },
            {name: 'ns_type' },
            {name: 'recordCls' },
            {name: 'why_not' },
            {name: 'can_job' },
            {name: 'item' },
            {name: 'user' },
            {name: 'service' },
            {name: 'ns' },
            {name: 'date' },
            {name: 'icon' },
            {name: 'data' },
            {name: 'text' }
        ]
    );

    var group_field = 'related';

    var store = new Baseliner.GroupingStore({
            reader: reader,
            url: '/package/list',
            baseParams: { limit: ps },
            sortInfo: {field: 'item', direction: "ASC"},
            groupField: group_field
    });
    
    store.load({params:{start: 0, limit: ps }});

    <& /comp/search_field.mas &>

    //********** Filtering
    var filter_cookie;
    var filter_obj = filter_cookie || {
        info : true,
        warn : true,
        debug: false,
        error: true
    };
    var filter_me = function( item, checked ) {
        filter_obj[ item.id ] = checked;
        //grid.getColumnModel().setHidden( 7, !filter_obj['debug'] );
        store.load();
    };

    var filter_menu = new Ext.menu.Menu({
        items: [
            { id: 'approval', text: _("Pending Approval"),checked: filter_obj['info'] , checkHandler: filter_me }
        ]
    });


    var resultTpl = new Ext.XTemplate(
        '<tpl for="."><div class="search-item {recordCls}">',
            '<h3><span>{ns_type}<br />{user}</span><img src="{icon}" />{item}</h3>',
            '{text}',
            '<tpl if="why_not">',
                '<br />{why_not}',
            '</tpl>',
        '</div></tpl>'
    );

    var grid = new Ext.grid.GridPanel({
        renderTo: 'main-panel',
        title: _("Packages"),
        header: false,
        autoScroll: true,
        tpl: resultTpl,
        autoWidth: true,
        autoSizeColumns: true,
        deferredRender:true,
        clicksToEdit: 'auto',
        store: store,
        stripeRows: true,
        viewConfig: [{
                forceFit: true
        }],
        view: new Ext.grid.GroupingView({
            forceFit:true,
            groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "Items" : "Item"]})'
        }),

        selModel: new Ext.grid.RowSelectionModel({singleSelect:true}),
        loadMask: true,
        columns: [
            { header: _("Scope"), width: 120, dataIndex: 'ns', sortable: true },	
            { header: _("Item"), width: 120, dataIndex: 'item', sortable: true },	
            { header: _("Tipo"), width: 120, dataIndex: 'ns_type', sortable: true },	
            { header: _("Parent"), width: 120, dataIndex: 'related', sortable: true },	
            { header: _('Message'), width: 450, dataIndex: 'text', sortable: true, cls: 'nowrapgrid'  }
        ],
        bbar: new Ext.PagingToolbar({
                            store: store,
                            pageSize: ps,
                            displayInfo: true,
                            displayMsg: _('Rows {0} - {1} of {2}'),
                            emptyMsg: "No hay registros disponibles"
                    }),
        tbar: [ _('Search')+': ', ' ',
            new Ext.app.SearchField({
                store: store,
                params: {start: 0, limit: ps, id_job: '<% $c->stash->{id_job} %>' },
                emptyText: _('<Enter your search string>')
            }),
            { text: _("Views"), menu: filter_menu },
<%doc>
            { text: _('Auto Refresh'),
                icon: '/static/images/icons/slot.svg', 
                enableToggle: true,
                pressed: false,
                cls: 'x-btn-text-icon',
                handler: function(t) {
                    if( t.pressed ) {
                        if( id_job == "" ) {
                            t.toggle();
                        } else {
                            autorefresh.start(task);
                        }
                    } else {
                        autorefresh.stop(task);
                    }
                }
            },
            {
                text: _('Annotations'),
                icon: '/static/images/icons/post.svg',
                cls: 'x-btn-text-icon',
                handler: annotation
            },
</%doc>
            '->'
            ]
    });


    //return grid;

    var myView = new Ext.ux.grid.livegrid.GridView({
            nearLimit : 80,
            loadMask  : {
                msg :  'Buffering. Please wait...'
            }
        });
        
    var store_live = new Ext.ux.grid.livegrid.Store({
                autoLoad : true,
                url: '/package/list',
                bufferSize : 200,
                reader     : new Ext.ux.grid.livegrid.JsonReader({
                    root            : 'data',
                    versionProperty : 'version',
                    totalProperty   : 'totalCount',
                    id              : 'id'
                  },
                  [
                    {name: 'provider' },
                    {name: 'related' },
                    {name: 'ns_type' },
                    {name: 'recordCls' },
                    {name: 'why_not' },
                    {name: 'can_job' },
                    {name: 'item' },
                    {name: 'user' },
                    {name: 'service' },
                    {name: 'ns' },
                    {name: 'date' },
                    {name: 'icon' },
                    {name: 'data' },
                    {name: 'text' }
                ]),
                sortInfo   : {field: 'item', direction: 'ASC'}
            })
    
    var itemTpl = function(value,metadata,rec,rowIndex,colIndex,store) {
        var icon = rec.icon || 'package.gif';
        return "<img alt='"+ rec.id +"' border=0 src='/static/images/"+icon+"' /><b>" + value + "</b>" ;
    };
    
    var livegrid = new Ext.ux.grid.livegrid.GridPanel({
            enableDragDrop : false,
            cm             : new Ext.grid.ColumnModel([
                new Ext.grid.RowNumberer({header : '#', width: 60 }),
                { header: _("Item"), width: 180, dataIndex: 'item', sortable: true, renderer: itemTpl  },	
                { header: _("Tipo"), width: 120, dataIndex: 'ns_type', sortable: true },	
                { header: _("Parent"), width: 120, dataIndex: 'related', sortable: true },	
                { header: _('Message'), width: 450, dataIndex: 'text', sortable: true, cls: 'nowrapgrid'  }
            ]),
            loadMask: true,
            title      : _("Packages"),
            height     : 400,
            autoWidth: true,
            autoSizeColumns: true,
            width      : 600,
            store      : store_live,
            selModel : new Ext.ux.grid.livegrid.RowSelectionModel(),
            //sm : new Ext.grid.CheckboxSelectionModel(),
            view     : myView,
            bbar     : new Ext.ux.grid.livegrid.Toolbar({
                view        : myView,
                displayInfo : true
            }),
        tbar: [ _('Search')+': ', ' ',
            new Ext.app.SearchField({
                store: store_live,
                params: {start: 0, limit: ps, id_job: '<% $c->stash->{id_job} %>' },
                emptyText: _('<Enter your search string>')
            }),
            { text: _("Views"), menu: filter_menu },
<%doc>
            { text: _('Auto Refresh'),
                icon: '/static/images/icons/slot.svg',
                enableToggle: true,
                pressed: false,
                cls: 'x-btn-text-icon',
                handler: function(t) {
                    if( t.pressed ) {
                        if( id_job == "" ) {
                            t.toggle();
                        } else {
                            autorefresh.start(task);
                        }
                    } else {
                        autorefresh.stop(task);
                    }
                }
            },
            {
                text: _('Annotations'),
                icon: '/static/images/icons/post.svg',
                cls: 'x-btn-text-icon',
                handler: annotation
            }, 
</%doc>
            '->'
            ]
        }); 
    return livegrid;
    
})();



