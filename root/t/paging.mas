<pre>
<%perl>
use Data::Page::Tied;
use YAML::Syck;
my @data;
my $cnt;

my $rsa = $c->model('Harvest::Haritems')->search( { itemname => { -like => '%.html' } }, { } );
my $rsb = $c->model('Harvest::Haritems')->search( { itemname => { -like => '%.jar' } }, {  } );
#my $bb = $rsb->slice( 0,10);
#while( my $r = $bb->next ) { print $cnt++ ," = ",$r->itemname,"\n" ; }
#return;

$rsa->result_class('DBIx::Class::ResultClass::HashRefInflator');
$rsb->result_class('DBIx::Class::ResultClass::HashRefInflator');

use Data::Stream::Bulk::DBIC;
use Data::Stream::Bulk::Array;
my $sa = Data::Stream::Bulk::DBIC->new( resultset=>$rsa );
my $sb = Data::Stream::Bulk::DBIC->new( resultset=>$rsb );
my $sc = Data::Stream::Bulk::Array->new( array=>[{ itemname=>'111' }, { itemname=>'chhhhhh' }] );

use Data::Stream::Bulk::Combined;
my $s = Data::Stream::Bulk::Combined->new( streams=>[ $sa, $sb, $sc ] );

my @items;

$s->filter( sort=>sub { uc shift->{itemname} cmp uc shift->{itemname} } ); 
foreach my $item ( $s->page( page=>1, rows=>10 ) ) {
	push @items, $item;
}
#print Dump( \@items );
print "$_->{itemname}\n" for @items;


#my @rs;
#while( my $r=$rsa->next ) { push @rs, $r };
#print "rs=" . scalar(@rs) . "\n";
#my $entries_per_page = 3;
#my $current_page = 20;
#my $handler = tie @data, 'Data::Page::Tied',
#             \@rs,
#             $entries_per_page,
#             $current_page;

#print Dump \@data;
#push @data, qw/more andmore/;
#print "first entry on page ", $handler->current_page(),
#	  " is ",                 $handler->first();
#print $data[ $handler->first ];
#print Dump \@rs;
</%perl>

