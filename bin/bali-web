#!/usr/bin/env bash
# starts the web server
export LIBPATH=$BASELINER_LIBPATH:$LIBPATH

if [ "$BASELINER_NLS_LANG" != "" ]; then
    export NLS_LANG=$BASELINER_NLS_LANG
fi

if [ "$BASELINER_LANG" != "" ]; then
    export LANG=$BASELINER_LANG
fi

if [ "$BASELINER_ENV" != "" ]; then
        export CATALYST_CONFIG_LOCAL_SUFFIX=$BASELINER_ENV
elif [ "$BALI_ENV" != "" ]; then
        export CATALYST_CONFIG_LOCAL_SUFFIX=$BALI_ENV
fi

if [ "$BASELINER_LOGHOME" != "" ]; then
    LOGDIR=$BASELINER_LOGHOME
else
    LOGDIR=$BASELINER_HOME/tmp/log
    mkdir -p $LOGDIR
fi

if [ "$BASELINER_PORT" = "" ]; then
    export BASELINER_PORT=3000
fi

if [ "$BASELINER_TRACE" != "" ]; then
    BASELINER_TRACE_MODULE="-d:Trace::More" 
fi

if [ ! -e "$LOGDIR" ]; then
    echo "Log directory does not exist or not accesible: $LOGDIR"
    exit 12
fi

LOGFILENAME=bali-web
NOW=`perl -MDateTime -le 'print DateTime->now()'`
LOGFILEOLD=$LOGDIR/${LOGFILENAME}_${NOW}.log
LOGFILE=$LOGDIR/$LOGFILENAME.log
export PIDFILE=$LOGDIR/bali-web.pid
export PIDFILE2=$LOGDIR/bali-starman.pid
export STATUSFILE=$LOGDIR/bali-web.status

test_char=`echo "\c"`
nonl='\c'
echop=''
if [ "$test_char" == '\c' ]; then
    nonl=''
    echop='-n'
fi

if [ "$1" = "start" ]; then
    if [ "$1" != "" ]; then
        shift
    fi
    if [ -e $PIDFILE ]; then
        FILE_PID=`cat $PIDFILE 2>/dev/null`
        kill -0 $FILE_PID 2>/dev/null
        if [ $? = 0 ]; then
                echo "Server is already running."
                exit 1;
        else
                rm $PIDFILE
        fi
    fi

    # purge old logs
    rm `find $LOGDIR/bali-web_* -mtime +30 2>/dev/null` >/dev/null 2>&1
    mv "$LOGFILE" "$LOGFILEOLD" 2>/dev/null
    gzip $LOGFILEOLD 2>/dev/null
    echo "log file: $LOGFILE"
    echo "pid file: $PIDFILE"
    echo "status file: $STATUSFILE"

    if [ "$BASELINER_HOME" != "" ]; then
        cd $BASELINER_HOME
    fi
    #nohup perl script/baseliner_server.pl $BASELINER_SERVER_ARGS $* > $LOGFILE 2>&1 &
    # CATALYST_ENGINE=HTTP::Prefork nohup perl $BASELINER_SERVER_PERLARGS script/baseliner_server.pl $BASELINER_SERVER_ARGS $* > $LOGFILE 2>&1 &
    # CATALYST_ENGINE=HTTP::Prefork perl $BASELINER_SERVER_PERLARGS script/baseliner_server.pl $BASELINER_SERVER_ARGS $* > $LOGFILE 2>&1 &
    # nohup perl $BASELINER_SERVER_PERLARGS script/baseliner_server.pl -f $BASELINER_SERVER_ARGS $* > $LOGFILE 2>&1 &
    # BASELINER_SERVER=prefork nohup perl $BASELINER_TRACE_MODULE $BASELINER_SERVER_PERLARGS script/baseliner_server.pl $BASELINER_SERVER_ARGS $* > $LOGFILE 2>&1 &
    # export PARENTPID=$$
    # perl -e 'local$|=1;print "Waiting for server to start on port $ENV{BASELINER_PORT}"; $x=60; while( $x-- && ! -e "$ENV{PIDFILE}" && kill 0, $ENV{PARENTPID}){ print "."; sleep 1 }' 2>/dev/null &
    
    nohup start_server --status-file "$STATUSFILE" --pid-file "$PIDFILE" --port $BASELINER_SERVER:$BASELINER_PORT $BASELINER_SUPERVISOR_ARGS -- starman $@ --pid "$PIDFILE2" --preload-app $BASELINER_SERVER_ARGS > "$LOGFILE" 2>&1 &

    #  starman --preload-app -D --pid "$PIDFILE" --port $BASELINER_PORT $BASELINER_SERVER_ARGS > "$LOGFILE" 2>&1 
    # plackup -s Starman -D --pid "$PIDFILE" --port $BASELINER_PORT $BASELINER_SERVER_ARGS > "$LOGFILE" 2>&1 
    #  nohup BASELINER_SERVER=prefork bali server --pidfile "$PIDFILE" --port $BASELINER_PORT $BASELINER_SERVER_ARGS > "$LOGFILE" 2>&1 &
    perl -e 'local$|=1;print "Waiting for server to start on $ENV{BASELINER_SERVER}:$ENV{BASELINER_PORT}"; $x=10; while( $x-- && ! -e "$ENV{PIDFILE2}" ){ print "."; sleep 1 }' 2>/dev/null 
    echo "done"
    if [ -e "$PIDFILE2" ]; then
        tail -4 $LOGFILE
        echo ""
        SERVER_PID=`cat "$PIDFILE2"`
        echo "Server started with pid $SERVER_PID"
        PROCS_NUM=`ps -ef|grep $SERVER_PID|grep -v grep|wc -l`
        echo "$PROCS_NUM proceses started."
    else
        echo ""
        echo "********* ERROR: Could not start server."
        echo ""
        PID=`cat "$PIDFILE"`
        kill $PID
        cat $LOGFILE
    fi
    echo ""
elif [ "$1" = "stop" ]; then
    if [ -e $PIDFILE ]; then
        export SERVER_PID=`cat $PIDFILE`
        echo "Server pid: $SERVER_PID"
        kill -s TERM $SERVER_PID 2>/dev/null
        if [ $? = 0 ]; then
                perl -MProc::Exists=pexists -e 'local$|=1;print "Waiting for server to stop on $ENV{BASELINER_SERVER}:$ENV{BASELINER_PORT}"; $x=60; while( $x-- && pexists( "$ENV{SERVER_PID}") ){ print "."; sleep 1 }' 2>/dev/null 
                echo "stopped."
        else
                echo "Server is not running."
        fi
        # rm "$PIDFILE" # starman cleans it up
    else
        echo "Server was not running or no pid file. No action taken."
    fi
elif [ "$1" = "kill" ]; then
    if [ -e $PIDFILE ]; then
        SERVER_PID=`cat $PIDFILE`
        echo "Killing Baseliner Server with pid: $SERVER_PID"
        kill -9 $SERVER_PID 2>/dev/null
    fi
    COUNT1=`ps uwwx | grep perl | grep "bali-web.pid" | grep -v grep | wc -l`
    COUNT2=`ps uwwx | grep perl | grep "bali server" | grep -v grep | wc -l`
    COUNT3=`ps uwwx | grep "starman" | grep -v grep | wc -l`
    COUNT=`perl -e '$x+=$_ for @ARGV; print $x' $COUNT1 $COUNT2 $COUNT3`
    if [ "$COUNT" -gt 0 ]; then
        echo "Killing all Baseliner Web server processes..."
        ps uwwx | grep perl | grep "baseliner_server.pl" | perl -a -n -l -e 'print join" ",">> ",$F[1]," => ",@F[10..$#F]'
        ps uwwx | grep perl | grep "baseliner_server.pl" | perl -a -n -l -e 'kill 9,$F[1]'
        ps uwwx | grep perl | grep "bali.server" | perl -a -n -l -e 'print join" ",">> ",$F[1]," => ",@F[10..$#F]'
        ps uwwx | grep perl | grep "bali.server" | perl -a -n -l -e 'kill 9,$F[1]'
        ps uwwx | grep starman | grep -v grep | perl -a -n -l -e 'print join" ",">> ",$F[1]," => ",@F[10..$#F]'
        ps uwwx | grep starman | grep -v grep | perl -a -n -l -e 'kill 9,$F[1]'
        echo "Done."
    else
        echo "No serviceable Baseliner processes found."
        exit 1
    fi
elif [ "$1" = "restart" ]; then
    shift
    if [ -e $PIDFILE ]; then
        SERVER_PID=`cat $PIDFILE`
        echo "Restarting (HUP) Baseliner Server with pid: $SERVER_PID"
        kill -HUP $SERVER_PID 2>/dev/null
    else
        bali-web stop
        bali-web start $*
    fi
elif [ "$1" = "more" ]; then
    more $LOGFILE
elif [ "$1" = "log" ]; then
    cat $LOGFILE
elif [ "$1" = "tail" ]; then
    tail -10000f $LOGFILE
elif [ "$1" = "" ]; then
    echo "Missing action. Available: start stop kill restart tail log more"
else
    echo "Unknown action $1"
fi

